[
  {
    "code": "    DidFinishNavigation(NavigationHandle* handle) {\n  if (handle->GetFrameTreeNodeId() != frame_tree_node_id_)\n    return;\n  if (!handle->HasCommitted())\n    return;\n  if (handle->GetRenderFrameHost()->GetSiteInstance() != parent_site_instance_)\n    return;\n  if (!handle->GetURL().IsAboutBlank())\n    return;\n  if (!handle->GetRenderFrameHost()->PrepareForInnerWebContentsAttach()) {\n    filter_->ResumeAttachOrDestroy(element_instance_id_,\n                                   MSG_ROUTING_NONE /* no plugin frame */);\n  }\n  base::PostTaskWithTraits(\n      FROM_HERE, {BrowserThread::UI},\n      base::BindOnce(&ExtensionsGuestViewMessageFilter::ResumeAttachOrDestroy,\n                     filter_, element_instance_id_,\n                     handle->GetRenderFrameHost()->GetRoutingID()));\n}\n",
    "response": "{\n  \"LINE1\": \"if (!handle->GetRenderFrameHost()->PrepareForInnerWebContentsAttach()) {\",\n  \"LINE2\": \"filter_->ResumeAttachOrDestroy(element_instance_id_, MSG_ROUTING_NONE /* no plugin frame */);\",\n  \"LINE3\": \"base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(&ExtensionsGuestViewMessageFilter::ResumeAttachOrDestroy, filter_, element_instance_id_, handle->GetRenderFrameHost()->GetRoutingID()));\",\n  \"LINE4\": \" if (handle->GetRenderFrameHost()->GetSiteInstance() != parent_site_instance_)\",\n  \"LINE5\": \"if (!handle->GetURL().IsAboutBlank())\"\n}",
    "truly_vulnerable_lines": "  if (handle->GetFrameTreeNodeId() != frame_tree_node_id_)\n    return;\n  if (!handle->HasCommitted())\n    return;\n  if (handle->GetRenderFrameHost()->GetSiteInstance() != parent_site_instance_)\n    return;\n  if (!handle->GetURL().IsAboutBlank())\n    return;\n  if (!handle->GetRenderFrameHost()->PrepareForInnerWebContentsAttach()) {\n    filter_->ResumeAttachOrDestroy(element_instance_id_,\n                                   MSG_ROUTING_NONE /* no plugin frame */);\n  }\n  base::PostTaskWithTraits(\n      FROM_HERE, {BrowserThread::UI},\n      base::BindOnce(&ExtensionsGuestViewMessageFilter::ResumeAttachOrDestroy,\n                     filter_, element_instance_id_,\n                     handle->GetRenderFrameHost()->GetRoutingID()));\n}\n"
  },
  {
    "code": " ExtensionsGuestViewMessageFilter::ExtensionsGuestViewMessageFilter(\n     int render_process_id,\n    BrowserContext* context)\n    : GuestViewMessageFilter(kFilteredMessageClasses,\n                             base::size(kFilteredMessageClasses),\n                              render_process_id,\n                              context),\n       content::BrowserAssociatedInterface<mojom::GuestView>(this, this) {\n  GetProcessIdToFilterMap()->insert_or_assign(render_process_id_, this);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"GetProcessIdToFilterMap()->insert_or_assign(render_process_id_, this);\"\n}\n```",
    "truly_vulnerable_lines": "  GetProcessIdToFilterMap()->insert_or_assign(render_process_id_, this);\n"
  },
  {
    "code": "void ExtensionsGuestViewMessageFilter::FrameNavigationHelper::FrameDeleted(\n    RenderFrameHost* render_frame_host) {\n  if (render_frame_host->GetFrameTreeNodeId() != frame_tree_node_id_)\n    return;\n  filter_->ResumeAttachOrDestroy(element_instance_id_,\n                                 MSG_ROUTING_NONE /* no plugin frame */);\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"filter_->ResumeAttachOrDestroy(element_instance_id_,\",\n  \"LINE2\": \"                                 MSG_ROUTING_NONE /* no plugin frame */);\"\n}\n```",
    "truly_vulnerable_lines": "    RenderFrameHost* render_frame_host) {\n  if (render_frame_host->GetFrameTreeNodeId() != frame_tree_node_id_)\n    return;\n  filter_->ResumeAttachOrDestroy(element_instance_id_,\n                                 MSG_ROUTING_NONE /* no plugin frame */);\n}\n"
  },
  {
    "code": "ExtensionsGuestViewMessageFilter::FrameNavigationHelper::FrameNavigationHelper(\n    RenderFrameHost* plugin_rfh,\n    int32_t guest_instance_id,\n    int32_t element_instance_id,\n    bool is_full_page_plugin,\n    ExtensionsGuestViewMessageFilter* filter)\n    : content::WebContentsObserver(\n          content::WebContents::FromRenderFrameHost(plugin_rfh)),\n      frame_tree_node_id_(plugin_rfh->GetFrameTreeNodeId()),\n      guest_instance_id_(guest_instance_id),\n      element_instance_id_(element_instance_id),\n      is_full_page_plugin_(is_full_page_plugin),\n      filter_(filter),\n      parent_site_instance_(plugin_rfh->GetParent()->GetSiteInstance()),\n      weak_factory_(this) {\n  DCHECK(GetGuestView());\n  NavigateToAboutBlank();\n  base::PostDelayedTaskWithTraits(\n      FROM_HERE, {BrowserThread::UI},\n      base::BindOnce(&ExtensionsGuestViewMessageFilter::FrameNavigationHelper::\n                         CancelPendingTask,\n                     weak_factory_.GetWeakPtr()),\n      base::TimeDelta::FromMilliseconds(kAttachFailureDelayMS));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"parent_site_instance_(plugin_rfh->GetParent()->GetSiteInstance())\",\n  \"LINE2\": \"DCHECK(GetGuestView())\",\n  \"LINE3\": \"NavigateToAboutBlank()\",\n  \"LINE4\": \"base::PostDelayedTaskWithTraits(\"\n}\n```",
    "truly_vulnerable_lines": "    RenderFrameHost* plugin_rfh,\n    int32_t guest_instance_id,\n    int32_t element_instance_id,\n    bool is_full_page_plugin,\n    ExtensionsGuestViewMessageFilter* filter)\n    : content::WebContentsObserver(\n          content::WebContents::FromRenderFrameHost(plugin_rfh)),\n      frame_tree_node_id_(plugin_rfh->GetFrameTreeNodeId()),\n      guest_instance_id_(guest_instance_id),\n      element_instance_id_(element_instance_id),\n      is_full_page_plugin_(is_full_page_plugin),\n      filter_(filter),\n      parent_site_instance_(plugin_rfh->GetParent()->GetSiteInstance()),\n      weak_factory_(this) {\n  DCHECK(GetGuestView());\n  NavigateToAboutBlank();\n  base::PostDelayedTaskWithTraits(\n      FROM_HERE, {BrowserThread::UI},\n      base::BindOnce(&ExtensionsGuestViewMessageFilter::FrameNavigationHelper::\n                         CancelPendingTask,\n                     weak_factory_.GetWeakPtr()),\n      base::TimeDelta::FromMilliseconds(kAttachFailureDelayMS));\n}\n"
  },
  {
    "code": "ExtensionsGuestViewMessageFilter::FrameNavigationHelper::GetGuestView() const {\n  return MimeHandlerViewGuest::From(\n             parent_site_instance_->GetProcess()->GetID(), guest_instance_id_)\n      ->As<MimeHandlerViewGuest>();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"parent_site_instance_->GetProcess()->GetID()\",\n  \"LINE2\": \"guest_instance_id_\"\n}\n```",
    "truly_vulnerable_lines": "  return MimeHandlerViewGuest::From(\n             parent_site_instance_->GetProcess()->GetID(), guest_instance_id_)\n      ->As<MimeHandlerViewGuest>();\n}\n"
  },
  {
    "code": "ProcessIdToFilterMap* GetProcessIdToFilterMap() {\n  static base::NoDestructor<ProcessIdToFilterMap> instance;\n  return instance.get();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"static base::NoDestructor<ProcessIdToFilterMap> instance;\"\n}\n```",
    "truly_vulnerable_lines": "  static base::NoDestructor<ProcessIdToFilterMap> instance;\n  return instance.get();\n}\n"
  },
  {
    "code": "ExtensionsGuestViewMessageFilter::MaybeCreateThrottle(\n    NavigationHandle* handle) {\n  DCHECK(content::MimeHandlerViewMode::UsesCrossProcessFrame());\n  if (!handle->GetParentFrame()) {\n    return nullptr;\n  }\n  int32_t parent_process_id = handle->GetParentFrame()->GetProcess()->GetID();\n  auto& map = *GetProcessIdToFilterMap();\n  if (!base::ContainsKey(map, parent_process_id) || !map[parent_process_id]) {\n    return nullptr;\n  }\n  for (auto& pair : map[parent_process_id]->frame_navigation_helpers_) {\n    if (!pair.second->ShouldCancelAndIgnore(handle))\n      continue;\n    return std::make_unique<CancelAndIgnoreNavigationForPluginFrameThrottle>(\n        handle);\n  }\n  return nullptr;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!base::ContainsKey(map, parent_process_id) || !map[parent_process_id]) {\",\n  \"LINE2\": \"for (auto& pair : map[parent_process_id]->frame_navigation_helpers_) {\",\n  \"LINE3\": \"if (!pair.second->ShouldCancelAndIgnore(handle))\",\n  \"LINE4\": \"return std::make_unique<CancelAndIgnoreNavigationForPluginFrameThrottle>( handle );\",\n  \"LINE5\": \"int32_t parent_process_id = handle->GetParentFrame()->GetProcess()->GetID();\"\n}\n```",
    "truly_vulnerable_lines": "    NavigationHandle* handle) {\n  DCHECK(content::MimeHandlerViewMode::UsesCrossProcessFrame());\n  if (!handle->GetParentFrame()) {\n    return nullptr;\n  }\n  int32_t parent_process_id = handle->GetParentFrame()->GetProcess()->GetID();\n  auto& map = *GetProcessIdToFilterMap();\n  if (!base::ContainsKey(map, parent_process_id) || !map[parent_process_id]) {\n    return nullptr;\n  }\n  for (auto& pair : map[parent_process_id]->frame_navigation_helpers_) {\n    if (!pair.second->ShouldCancelAndIgnore(handle))\n      continue;\n    return std::make_unique<CancelAndIgnoreNavigationForPluginFrameThrottle>(\n        handle);\n  }\n  return nullptr;\n}\n"
  },
  {
    "code": "    NavigateToAboutBlank() {\n  GURL about_blank(url::kAboutBlankURL);\n  content::NavigationController::LoadURLParams params(about_blank);\n  params.frame_tree_node_id = frame_tree_node_id_;\n  params.source_site_instance = parent_site_instance_;\n  params.is_renderer_initiated = true;\n  web_contents()->GetController().LoadURLWithParams(params);\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"params.frame_tree_node_id = frame_tree_node_id_;\",\n  \"LINE2\": \"params.source_site_instance = parent_site_instance_;\",\n  \"LINE3\": \"params.is_renderer_initiated = true;\"\n}\n```",
    "truly_vulnerable_lines": "  GURL about_blank(url::kAboutBlankURL);\n  content::NavigationController::LoadURLParams params(about_blank);\n  params.frame_tree_node_id = frame_tree_node_id_;\n  params.source_site_instance = parent_site_instance_;\n  params.is_renderer_initiated = true;\n  web_contents()->GetController().LoadURLWithParams(params);\n}\n"
  },
  {
    "code": "void RemoveProcessIdFromGlobalMap(int32_t process_id) {\n  DCHECK_CURRENTLY_ON(BrowserThread::UI);\n  GetProcessIdToFilterMap()->erase(process_id);\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"void RemoveProcessIdFromGlobalMap(int32_t process_id) {\",\n  \"LINE2\": \"  DCHECK_CURRENTLY_ON(BrowserThread::UI);\",\n  \"LINE3\": \"  GetProcessIdToFilterMap()->erase(process_id);\"\n}\n```",
    "truly_vulnerable_lines": "  DCHECK_CURRENTLY_ON(BrowserThread::UI);\n  GetProcessIdToFilterMap()->erase(process_id);\n}\n"
  },
  {
    "code": "void ExtensionsGuestViewMessageFilter::ResumeAttachOrDestroy(\n    int32_t element_instance_id,\n    int32_t plugin_frame_routing_id) {\n  auto it = frame_navigation_helpers_.find(element_instance_id);\n  if (it == frame_navigation_helpers_.end()) {\n    return;\n  }\n  auto* plugin_rfh = content::RenderFrameHost::FromID(render_process_id_,\n                                                      plugin_frame_routing_id);\n  auto* helper = it->second.get();\n  auto* guest_view = helper->GetGuestView();\n  if (!guest_view)\n    return;\n \n  if (plugin_rfh) {\n    DCHECK(\n        guest_view->web_contents()->CanAttachToOuterContentsFrame(plugin_rfh));\n    guest_view->AttachToOuterWebContentsFrame(plugin_rfh, element_instance_id,\n                                              helper->is_full_page_plugin());\n  } else {\n    guest_view->GetEmbedderFrame()->Send(\n        new ExtensionsGuestViewMsg_DestroyFrameContainer(element_instance_id));\n    guest_view->Destroy(true);\n  }\n  frame_navigation_helpers_.erase(element_instance_id);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"auto* plugin_rfh = content::RenderFrameHost::FromID(render_process_id_, plugin_frame_routing_id);\",\n  \"LINE2\": \"if (plugin_rfh) {\",\n  \"LINE3\": \"guest_view->AttachToOuterWebContentsFrame(plugin_rfh, element_instance_id, helper->is_full_page_plugin());\",\n  \"LINE4\": \"guest_view->GetEmbedderFrame()->Send(new ExtensionsGuestViewMsg_DestroyFrameContainer(element_instance_id));\",\n  \"LINE5\": \"guest_view->Destroy(true);\"\n}\n```",
    "truly_vulnerable_lines": "    int32_t element_instance_id,\n    int32_t plugin_frame_routing_id) {\n  auto it = frame_navigation_helpers_.find(element_instance_id);\n  if (it == frame_navigation_helpers_.end()) {\n    return;\n  }\n  auto* plugin_rfh = content::RenderFrameHost::FromID(render_process_id_,\n                                                      plugin_frame_routing_id);\n  auto* helper = it->second.get();\n  auto* guest_view = helper->GetGuestView();\n  if (!guest_view)\n    return;\n  if (plugin_rfh) {\n    DCHECK(\n        guest_view->web_contents()->CanAttachToOuterContentsFrame(plugin_rfh));\n    guest_view->AttachToOuterWebContentsFrame(plugin_rfh, element_instance_id,\n                                              helper->is_full_page_plugin());\n  } else {\n    guest_view->GetEmbedderFrame()->Send(\n        new ExtensionsGuestViewMsg_DestroyFrameContainer(element_instance_id));\n    guest_view->Destroy(true);\n  }\n  frame_navigation_helpers_.erase(element_instance_id);\n"
  },
  {
    "code": "    ShouldCancelAndIgnore(NavigationHandle* handle) {\n  return handle->GetFrameTreeNodeId() == frame_tree_node_id_;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"return handle->GetFrameTreeNodeId() == frame_tree_node_id_;\"\n}\n```",
    "truly_vulnerable_lines": "  return handle->GetFrameTreeNodeId() == frame_tree_node_id_;\n}\n"
  },
  {
    "code": "  SiteInstance* parent_site_instance() const {\n    return parent_site_instance_.get();\n  }\n",
    "response": "```json\n{\n  \"LINE1\": \"return parent_site_instance_.get();\"\n}\n```",
    "truly_vulnerable_lines": "    return parent_site_instance_.get();\n  }\n"
  },
  {
    "code": " ExtensionsGuestViewMessageFilter::~ExtensionsGuestViewMessageFilter() {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  (*GetProcessIdToFilterMap())[render_process_id_] = nullptr;\n  base::PostTaskWithTraits(\n      FROM_HERE, BrowserThread::UI,\n      base::BindOnce(RemoveProcessIdFromGlobalMap, render_process_id_));\n }\n",
    "response": "{\n  \"LINE1\": \"(*GetProcessIdToFilterMap())[render_process_id_] = nullptr;\",\n  \"LINE2\": \"base::PostTaskWithTraits(\"\n}",
    "truly_vulnerable_lines": "  (*GetProcessIdToFilterMap())[render_process_id_] = nullptr;\n  base::PostTaskWithTraits(\n      FROM_HERE, BrowserThread::UI,\n      base::BindOnce(RemoveProcessIdFromGlobalMap, render_process_id_));\n"
  },
  {
    "code": "void DOMStorageContextWrapper::OpenSessionStorage(\n    int process_id,\n    const std::string& namespace_id,\n    mojo::ReportBadMessageCallback bad_message_callback,\n     blink::mojom::SessionStorageNamespaceRequest request) {\n   if (!mojo_session_state_)\n     return;\n  mojo_task_runner_->PostTask(\n       FROM_HERE,\n       base::BindOnce(&SessionStorageContextMojo::OpenSessionStorage,\n                      base::Unretained(mojo_session_state_), process_id,\n                     namespace_id, std::move(bad_message_callback),\n                      std::move(request)));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"base::Unretained(mojo_session_state_), process_id, namespace_id, std::move(bad_message_callback), std::move(request)));\"\n}\n```",
    "truly_vulnerable_lines": "                     namespace_id, std::move(bad_message_callback),\n"
  },
  {
    "code": " void DOMStorageContextWrapper::Shutdown() {\n  DCHECK(context_.get());\n  mojo_task_runner_->PostTask(\n      FROM_HERE, base::BindOnce(&LocalStorageContextMojo::ShutdownAndDelete,\n                                base::Unretained(mojo_state_)));\n  mojo_state_ = nullptr;\n   if (mojo_session_state_) {\n     mojo_task_runner_->PostTask(\n         FROM_HERE, base::BindOnce(&SessionStorageContextMojo::ShutdownAndDelete,\n                                   base::Unretained(mojo_session_state_)));\n     mojo_session_state_ = nullptr;\n   }\n   memory_pressure_listener_.reset();\n  context_->task_runner()->PostShutdownBlockingTask(\n      FROM_HERE, DOMStorageTaskRunner::PRIMARY_SEQUENCE,\n      base::BindOnce(&DOMStorageContextImpl::Shutdown, context_));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"base::Unretained(mojo_state_)\",\n  \"LINE2\": \"base::Unretained(mojo_session_state_)\",\n  \"LINE3\": \"mojo_state_ = nullptr\",\n  \"LINE4\": \"mojo_session_state_ = nullptr\"\n}\n```",
    "truly_vulnerable_lines": "  DCHECK(context_.get());\n  mojo_task_runner_->PostTask(\n      FROM_HERE, base::BindOnce(&LocalStorageContextMojo::ShutdownAndDelete,\n                                base::Unretained(mojo_state_)));\n  mojo_state_ = nullptr;\n  context_->task_runner()->PostShutdownBlockingTask(\n      FROM_HERE, DOMStorageTaskRunner::PRIMARY_SEQUENCE,\n      base::BindOnce(&DOMStorageContextImpl::Shutdown, context_));\n"
  },
  {
    "code": "void Document::InitContentSecurityPolicy(\n    ContentSecurityPolicy* csp,\n    const ContentSecurityPolicy* policy_to_inherit,\n    const ContentSecurityPolicy* previous_document_csp) {\n   SetContentSecurityPolicy(csp ? csp : ContentSecurityPolicy::Create());\n \n   GetContentSecurityPolicy()->BindToExecutionContext(this);\n \n  if (policy_to_inherit) {\n     GetContentSecurityPolicy()->CopyStateFrom(policy_to_inherit);\n  } else {\n    if (frame_) {\n       Frame* inherit_from = frame_->Tree().Parent()\n                                 ? frame_->Tree().Parent()\n                                 : frame_->Client()->Opener();\n       if (inherit_from && frame_ != inherit_from) {\n         DCHECK(inherit_from->GetSecurityContext() &&\n                inherit_from->GetSecurityContext()->GetContentSecurityPolicy());\n        policy_to_inherit =\n            inherit_from->GetSecurityContext()->GetContentSecurityPolicy();\n       }\n     }\n    if (!policy_to_inherit)\n      policy_to_inherit = previous_document_csp;\n    if (policy_to_inherit &&\n        (url_.IsEmpty() || url_.ProtocolIsAbout() || url_.ProtocolIsData() ||\n         url_.ProtocolIs(\"blob\") || url_.ProtocolIs(\"filesystem\")))\n      GetContentSecurityPolicy()->CopyStateFrom(policy_to_inherit);\n  }\n  if (policy_to_inherit && IsPluginDocument())\n    GetContentSecurityPolicy()->CopyPluginTypesFrom(policy_to_inherit);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"SetContentSecurityPolicy(csp ? csp : ContentSecurityPolicy::Create());\",\n  \"LINE2\": \"policy_to_inherit = inherit_from->GetSecurityContext()->GetContentSecurityPolicy();\",\n  \"LINE3\": \"if (!policy_to_inherit) policy_to_inherit = previous_document_csp;\",\n  \"LINE4\": \"GetContentSecurityPolicy()->CopyStateFrom(policy_to_inherit);\",\n  \"LINE5\": \"GetContentSecurityPolicy()->CopyPluginTypesFrom(policy_to_inherit);\"\n}\n```",
    "truly_vulnerable_lines": "    ContentSecurityPolicy* csp,\n    const ContentSecurityPolicy* policy_to_inherit,\n    const ContentSecurityPolicy* previous_document_csp) {\n  if (policy_to_inherit) {\n  } else {\n    if (frame_) {\n        policy_to_inherit =\n            inherit_from->GetSecurityContext()->GetContentSecurityPolicy();\n    if (!policy_to_inherit)\n      policy_to_inherit = previous_document_csp;\n    if (policy_to_inherit &&\n        (url_.IsEmpty() || url_.ProtocolIsAbout() || url_.ProtocolIsData() ||\n         url_.ProtocolIs(\"blob\") || url_.ProtocolIs(\"filesystem\")))\n      GetContentSecurityPolicy()->CopyStateFrom(policy_to_inherit);\n  }\n  if (policy_to_inherit && IsPluginDocument())\n    GetContentSecurityPolicy()->CopyPluginTypesFrom(policy_to_inherit);\n"
  },
  {
    "code": "DocumentInit& DocumentInit::WithPreviousDocumentCSP(\n    const ContentSecurityPolicy* previous_csp) {\n  DCHECK(!previous_csp_);\n  previous_csp_ = previous_csp;\n  return *this;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DCHECK(!previous_csp_);\",\n  \"LINE2\": \"previous_csp_ = previous_csp;\"\n}\n```",
    "truly_vulnerable_lines": "    const ContentSecurityPolicy* previous_csp) {\n  DCHECK(!previous_csp_);\n  previous_csp_ = previous_csp;\n  return *this;\n}\n"
  },
  {
    "code": "bool ContentSecurityPolicy::AllowPluginTypeForDocument(\n    const Document& document,\n    const String& type,\n    const String& type_attribute,\n    const KURL& url,\n    SecurityViolationReportingPolicy reporting_policy) const {\n  if (document.GetContentSecurityPolicy() &&\n      !document.GetContentSecurityPolicy()->AllowPluginType(\n           type, type_attribute, url, reporting_policy))\n     return false;\n \n  LocalFrame* frame = document.GetFrame();\n  if (frame && frame->Tree().Parent() && document.IsPluginDocument()) {\n    ContentSecurityPolicy* parent_csp = frame->Tree()\n                                            .Parent()\n                                            ->GetSecurityContext()\n                                            ->GetContentSecurityPolicy();\n    if (parent_csp && !parent_csp->AllowPluginType(type, type_attribute, url,\n                                                   reporting_policy))\n      return false;\n  }\n   return true;\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (frame && frame->Tree().Parent() && document.IsPluginDocument()) {\",\n  \"LINE2\": \"ContentSecurityPolicy* parent_csp = frame->Tree()\",\n  \"LINE3\": \"->GetSecurityContext()\",\n  \"LINE4\": \"if (parent_csp && !parent_csp->AllowPluginType(type, type_attribute, url,\",\n  \"LINE5\": \"return false;\"\n}\n```",
    "truly_vulnerable_lines": "  LocalFrame* frame = document.GetFrame();\n  if (frame && frame->Tree().Parent() && document.IsPluginDocument()) {\n    ContentSecurityPolicy* parent_csp = frame->Tree()\n                                            .Parent()\n                                            ->GetSecurityContext()\n                                            ->GetContentSecurityPolicy();\n    if (parent_csp && !parent_csp->AllowPluginType(type, type_attribute, url,\n                                                   reporting_policy))\n      return false;\n  }\n"
  },
  {
    "code": "void DocumentLoader::DidInstallNewDocument(\n    Document* document,\n    const ContentSecurityPolicy* previous_csp) {\n   document->SetReadyState(Document::kLoading);\n   if (content_security_policy_) {\n    document->InitContentSecurityPolicy(content_security_policy_.Release(),\n                                        nullptr, previous_csp);\n   }\n \n   if (history_item_ && IsBackForwardLoadType(load_type_))\n    document->SetStateForNewFormElements(history_item_->GetDocumentState());\n\n  DCHECK(document->GetFrame());\n  document->GetFrame()->GetClientHintsPreferences().UpdateFrom(\n      client_hints_preferences_);\n\n  Settings* settings = document->GetSettings();\n  fetcher_->SetImagesEnabled(settings->GetImagesEnabled());\n  fetcher_->SetAutoLoadImages(settings->GetLoadsImagesAutomatically());\n\n  const AtomicString& dns_prefetch_control =\n      response_.HttpHeaderField(http_names::kXDNSPrefetchControl);\n  if (!dns_prefetch_control.IsEmpty())\n    document->ParseDNSPrefetchControlHeader(dns_prefetch_control);\n\n  String header_content_language =\n      response_.HttpHeaderField(http_names::kContentLanguage);\n  if (!header_content_language.IsEmpty()) {\n    wtf_size_t comma_index = header_content_language.find(',');\n    header_content_language.Truncate(comma_index);\n    header_content_language =\n        header_content_language.StripWhiteSpace(IsHTMLSpace<UChar>);\n    if (!header_content_language.IsEmpty())\n      document->SetContentLanguage(AtomicString(header_content_language));\n  }\n\n  String referrer_policy_header =\n      response_.HttpHeaderField(http_names::kReferrerPolicy);\n  if (!referrer_policy_header.IsNull()) {\n    UseCounter::Count(*document, WebFeature::kReferrerPolicyHeader);\n    document->ParseAndSetReferrerPolicy(referrer_policy_header);\n  }\n\n  if (response_.IsSignedExchangeInnerResponse())\n    UseCounter::Count(*document, WebFeature::kSignedExchangeInnerResponse);\n\n  GetLocalFrameClient().DidCreateNewDocument();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"document->ParseDNSPrefetchControlHeader(dns_prefetch_control);\",\n  \"LINE2\": \"header_content_language.Truncate(comma_index);\",\n  \"LINE3\": \"document->SetContentLanguage(AtomicString(header_content_language));\",\n  \"LINE4\": \"document->ParseAndSetReferrerPolicy(referrer_policy_header);\",\n  \"LINE5\": \"fetcher_->SetAutoLoadImages(settings->GetLoadsImagesAutomatically());\"\n}\n```",
    "truly_vulnerable_lines": "    Document* document,\n    const ContentSecurityPolicy* previous_csp) {\n    document->InitContentSecurityPolicy(content_security_policy_.Release(),\n                                        nullptr, previous_csp);\n"
  },
  {
    "code": " std::wstring GetSwitchValueFromCommandLine(const std::wstring& command_line,\n                                            const std::wstring& switch_name) {\n   assert(!command_line.empty());\n   assert(!switch_name.empty());\n \n   std::vector<std::wstring> as_array = TokenizeCommandLineToArray(command_line);\n   std::wstring switch_with_equal = L\"--\" + switch_name + L\"=\";\n  for (size_t i = 1; i < as_array.size(); ++i) {\n    const std::wstring& arg = as_array[i];\n     if (arg.compare(0, switch_with_equal.size(), switch_with_equal) == 0)\n       return arg.substr(switch_with_equal.size());\n   }\n\n  return std::wstring();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"std::vector<std::wstring> as_array = TokenizeCommandLineToArray(command_line);\",\n  \"LINE2\": \"std::wstring switch_with_equal = L\\\"--\\\" + switch_name + L\\\"=\\\";\",\n  \"LINE3\": \"if (arg.compare(0, switch_with_equal.size(), switch_with_equal) == 0)\",\n  \"LINE4\": \"return arg.substr(switch_with_equal.size());\"\n}\n```",
    "truly_vulnerable_lines": "  for (size_t i = 1; i < as_array.size(); ++i) {\n    const std::wstring& arg = as_array[i];\n"
  },
  {
    "code": "DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() {\n  DCHECK_EQ(read_type_, kReadAsArrayBuffer);\n  if (array_buffer_result_)\n    return array_buffer_result_;\n\n   if (!raw_data_ || error_code_ != FileErrorCode::kOK)\n     return nullptr;\n \n  DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n  if (finished_loading_) {\n    array_buffer_result_ = result;\n    AdjustReportedMemoryUsageToV8(\n        -1 * static_cast<int64_t>(raw_data_->ByteLength()));\n    raw_data_.reset();\n   }\n  return result;\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!raw_data_ || error_code_ != FileErrorCode::kOK)\",\n  \"LINE2\": \"DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\",\n  \"LINE3\": \"AdjustReportedMemoryUsageToV8(-1 * static_cast<int64_t>(raw_data_->ByteLength()));\",\n  \"LINE4\": \"raw_data_.reset();\"\n}\n```",
    "truly_vulnerable_lines": "  DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n  if (finished_loading_) {\n    array_buffer_result_ = result;\n    AdjustReportedMemoryUsageToV8(\n        -1 * static_cast<int64_t>(raw_data_->ByteLength()));\n    raw_data_.reset();\n  return result;\n"
  },
  {
    "code": " bool SVGElement::HasSVGParent() const {\n  return ParentOrShadowHostElement() &&\n         ParentOrShadowHostElement()->IsSVGElement();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"return ParentOrShadowHostElement() &&\",\n  \"LINE2\": \"ParentOrShadowHostElement()->IsSVGElement();\"\n}\n```",
    "truly_vulnerable_lines": "  return ParentOrShadowHostElement() &&\n         ParentOrShadowHostElement()->IsSVGElement();\n"
  },
  {
    "code": " ImageBitmapFactories::ImageBitmapLoader::ImageBitmapLoader(\n     ImageBitmapFactories& factory,\n     base::Optional<IntRect> crop_rect,\n     ScriptState* script_state,\n     const ImageBitmapOptions* options)\n    : loader_(\n           FileReaderLoader::Create(FileReaderLoader::kReadAsArrayBuffer, this)),\n       factory_(&factory),\n       resolver_(ScriptPromiseResolver::Create(script_state)),\n       crop_rect_(crop_rect),\n       options_(options) {}\n",
    "response": "```json\n{\n  \"LINE1\": \"loader_(FileReaderLoader::Create(FileReaderLoader::kReadAsArrayBuffer, this))\",\n  \"LINE2\": \"resolver_(ScriptPromiseResolver::Create(script_state))\",\n  \"LINE3\": \"crop_rect_(crop_rect)\",\n  \"LINE4\": \"options_(options)\"\n}\n```",
    "truly_vulnerable_lines": "    : loader_(\n"
  },
  {
    "code": "void ImageBitmapFactories::ImageBitmapLoader::LoadBlobAsync(\n    Blob* blob) {\n   loader_->Start(blob->GetBlobDataHandle());\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"Blob* blob\",\n  \"LINE2\": \"loader_->Start(blob->GetBlobDataHandle())\"\n}\n```",
    "truly_vulnerable_lines": "    Blob* blob) {\n"
  },
  {
    "code": "void ImageBitmapFactories::Trace(blink::Visitor* visitor) {\n  visitor->Trace(pending_loaders_);\n  Supplement<LocalDOMWindow>::Trace(visitor);\n  Supplement<WorkerGlobalScope>::Trace(visitor);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"visitor->Trace(pending_loaders_);\",\n  \"LINE2\": \"Supplement<LocalDOMWindow>::Trace(visitor);\",\n  \"LINE3\": \"Supplement<WorkerGlobalScope>::Trace(visitor);\"\n}\n```",
    "truly_vulnerable_lines": "  visitor->Trace(pending_loaders_);\n  Supplement<LocalDOMWindow>::Trace(visitor);\n  Supplement<WorkerGlobalScope>::Trace(visitor);\n"
  },
  {
    "code": "void RenderFrameImpl::OnSelectPopupMenuItem(int selected_index) {\n  if (external_popup_menu_ == NULL)\n     return;\n \n   blink::WebScopedUserGesture gesture(frame_);\n  external_popup_menu_->DidSelectItem(selected_index);\n  external_popup_menu_.reset();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"external_popup_menu_->DidSelectItem(selected_index);\"\n}\n```",
    "truly_vulnerable_lines": "  external_popup_menu_->DidSelectItem(selected_index);\n  external_popup_menu_.reset();\n"
  },
  {
    "code": " void RenderFrameImpl::OnSelectPopupMenuItems(\n    bool canceled,\n    const std::vector<int>& selected_indices) {\n  if (!external_popup_menu_)\n     return;\n \n   blink::WebScopedUserGesture gesture(frame_);\n  external_popup_menu_->DidSelectItems(canceled, selected_indices);\n  external_popup_menu_.reset();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"external_popup_menu_->DidSelectItems(canceled, selected_indices);\",\n  \"LINE2\": \"const std::vector<int>& selected_indices\"\n}\n```",
    "truly_vulnerable_lines": "  external_popup_menu_->DidSelectItems(canceled, selected_indices);\n  external_popup_menu_.reset();\n"
  },
  {
    "code": "   void ProcessStateChangesPlanB(WebRtcSetDescriptionObserver::States states) {\n     DCHECK_EQ(sdp_semantics_, webrtc::SdpSemantics::kPlanB);\n     std::vector<RTCRtpReceiver*> removed_receivers;\n    for (auto it = handler_->rtp_receivers_.begin();\n         it != handler_->rtp_receivers_.end(); ++it) {\n      if (ReceiverWasRemoved(*(*it), states.transceiver_states))\n        removed_receivers.push_back(it->get());\n    }\n \n     for (auto& transceiver_state : states.transceiver_states) {\n      if (ReceiverWasAdded(transceiver_state)) {\n         handler_->OnAddReceiverPlanB(transceiver_state.MoveReceiverState());\n       }\n     }\n     for (auto* removed_receiver : removed_receivers) {\n      handler_->OnRemoveReceiverPlanB(RTCRtpReceiver::getId(\n          removed_receiver->state().webrtc_receiver().get()));\n     }\n   }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (ReceiverWasRemoved(*(*it), states.transceiver_states))\",\n  \"LINE2\": \"for (auto* removed_receiver : removed_receivers) {\",\n  \"LINE3\": \"removed_receivers.push_back(it->get());\",\n  \"LINE4\": \"handler_->OnAddReceiverPlanB(transceiver_state.MoveReceiverState());\",\n  \"LINE5\": \"handler_->OnRemoveReceiverPlanB(RTCRtpReceiver::getId(removed_receiver->state().webrtc_receiver().get()));\"\n}\n```",
    "truly_vulnerable_lines": "      if (ReceiverWasAdded(transceiver_state)) {\n      handler_->OnRemoveReceiverPlanB(RTCRtpReceiver::getId(\n          removed_receiver->state().webrtc_receiver().get()));\n"
  },
  {
    "code": "   void ProcessStateChangesUnifiedPlan(\n       WebRtcSetDescriptionObserver::States states) {\n     DCHECK_EQ(sdp_semantics_, webrtc::SdpSemantics::kUnifiedPlan);\n    handler_->OnModifyTransceivers(\n        std::move(states.transceiver_states),\n        action_ == PeerConnectionTracker::ACTION_SET_REMOTE_DESCRIPTION);\n   }\n",
    "response": "```json\n{\n  \"LINE1\": \"std::move(states.transceiver_states)\"\n}\n```",
    "truly_vulnerable_lines": "    handler_->OnModifyTransceivers(\n        std::move(states.transceiver_states),\n        action_ == PeerConnectionTracker::ACTION_SET_REMOTE_DESCRIPTION);\n"
  },
  {
    "code": "void PaymentRequest::AreRequestedMethodsSupportedCallback(\n    bool methods_supported) {\n  if (methods_supported) {\n    if (SatisfiesSkipUIConstraints()) {\n      skipped_payment_request_ui_ = true;\n      Pay();\n    }\n  } else {\n    journey_logger_.SetNotShown(\n        JourneyLogger::NOT_SHOWN_REASON_NO_SUPPORTED_PAYMENT_METHOD);\n    client_->OnError(mojom::PaymentErrorReason::NOT_SUPPORTED);\n    if (observer_for_testing_)\n      observer_for_testing_->OnNotSupportedError();\n     OnConnectionTerminated();\n   }\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (observer_for_testing_)\",\n  \"LINE2\": \"observer_for_testing_->OnNotSupportedError();\",\n  \"LINE3\": \"OnConnectionTerminated();\"\n}\n```",
    "truly_vulnerable_lines": "    bool methods_supported) {\n  if (methods_supported) {\n    if (SatisfiesSkipUIConstraints()) {\n      skipped_payment_request_ui_ = true;\n      Pay();\n    }\n  } else {\n    journey_logger_.SetNotShown(\n        JourneyLogger::NOT_SHOWN_REASON_NO_SUPPORTED_PAYMENT_METHOD);\n    client_->OnError(mojom::PaymentErrorReason::NOT_SUPPORTED);\n    if (observer_for_testing_)\n      observer_for_testing_->OnNotSupportedError();\n}\n"
  },
  {
    "code": " void PaymentRequest::Complete(mojom::PaymentComplete result) {\n  if (!client_.is_bound())\n     return;\n \n  if (result == mojom::PaymentComplete::FAIL) {\n    delegate_->ShowErrorMessage();\n  } else {\n    DCHECK(!has_recorded_completion_);\n    journey_logger_.SetCompleted();\n    has_recorded_completion_ = true;\n\n    delegate_->GetPrefService()->SetBoolean(kPaymentsFirstTransactionCompleted,\n                                            true);\n    client_->OnComplete();\n    state_->RecordUseStats();\n  }\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"delegate_->ShowErrorMessage();\",\n  \"LINE2\": \"delegate_->GetPrefService()->SetBoolean(kPaymentsFirstTransactionCompleted, true);\",\n  \"LINE3\": \"client_->OnComplete();\",\n  \"LINE4\": \"state_->RecordUseStats();\",\n  \"LINE5\": \"\"\n}\n```",
    "truly_vulnerable_lines": "  if (!client_.is_bound())\n"
  },
  {
    "code": " void PaymentRequest::Retry(mojom::PaymentValidationErrorsPtr errors) {\n  if (!client_.is_bound() || !binding_.is_bound()) {\n    DLOG(ERROR) << \"Attempted Retry(), but binding(s) missing.\";\n     OnConnectionTerminated();\n     return;\n   }\n \n  if (!display_handle_) {\n    DLOG(ERROR) << \"Attempted Retry(), but display_handle_ is nullptr.\";\n     OnConnectionTerminated();\n     return;\n   }\n \n   std::string error;\n   if (!PaymentsValidators::IsValidPaymentValidationErrorsFormat(errors,\n                                                                 &error)) {\n    DLOG(ERROR) << error;\n     client_->OnError(mojom::PaymentErrorReason::USER_CANCEL);\n     OnConnectionTerminated();\n     return;\n  }\n\n  spec()->Retry(std::move(errors));\n   display_handle_->Retry();\n }\n",
    "response": "```json\n{\n  \"LINE3\": \"if (!display_handle_) {\",\n  \"LINE4\": \"if (!PaymentsValidators::IsValidPaymentValidationErrorsFormat(errors, &error)) {\",\n  \"LINE5\": \"spec()->Retry(std::move(errors));\"\n}\n```",
    "truly_vulnerable_lines": "  if (!client_.is_bound() || !binding_.is_bound()) {\n    DLOG(ERROR) << \"Attempted Retry(), but binding(s) missing.\";\n  if (!display_handle_) {\n    DLOG(ERROR) << \"Attempted Retry(), but display_handle_ is nullptr.\";\n    DLOG(ERROR) << error;\n"
  },
  {
    "code": "bool PaymentRequest::SatisfiesSkipUIConstraints() const {\n  return base::FeatureList::IsEnabled(features::kWebPaymentsSingleAppUiSkip) &&\n         base::FeatureList::IsEnabled(::features::kServiceWorkerPaymentApps) &&\n         is_show_user_gesture_ && state()->is_get_all_instruments_finished() &&\n         state()->available_instruments().size() == 1 &&\n         spec()->stringified_method_data().size() == 1 &&\n         !spec()->request_shipping() && !spec()->request_payer_name() &&\n         !spec()->request_payer_phone() &&\n         !spec()->request_payer_email()\n         && spec()->url_payment_method_identifiers().size() == 1;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"spec()->stringified_method_data().size() == 1\",\n  \"LINE2\": \"spec()->url_payment_method_identifiers().size() == 1\"\n}\n```",
    "truly_vulnerable_lines": "  return base::FeatureList::IsEnabled(features::kWebPaymentsSingleAppUiSkip) &&\n         base::FeatureList::IsEnabled(::features::kServiceWorkerPaymentApps) &&\n         is_show_user_gesture_ && state()->is_get_all_instruments_finished() &&\n         state()->available_instruments().size() == 1 &&\n         spec()->stringified_method_data().size() == 1 &&\n         !spec()->request_shipping() && !spec()->request_payer_name() &&\n         !spec()->request_payer_phone() &&\n         !spec()->request_payer_email()\n         && spec()->url_payment_method_identifiers().size() == 1;\n}\n"
  },
  {
    "code": " void PaymentRequest::Show(bool is_user_gesture) {\n  if (!client_.is_bound() || !binding_.is_bound()) {\n    LOG(ERROR) << \"Attempted Show(), but binding(s) missing.\";\n     OnConnectionTerminated();\n     return;\n   }\n \n   display_handle_ = display_manager_->TryShow(delegate_.get());\n   if (!display_handle_) {\n    LOG(ERROR) << \"A PaymentRequest UI is already showing\";\n     journey_logger_.SetNotShown(\n         JourneyLogger::NOT_SHOWN_REASON_CONCURRENT_REQUESTS);\n     client_->OnError(mojom::PaymentErrorReason::ALREADY_SHOWING);\n    OnConnectionTerminated();\n    return;\n   }\n \n   if (!delegate_->IsBrowserWindowActive()) {\n    LOG(ERROR) << \"Cannot show PaymentRequest UI in a background tab\";\n     journey_logger_.SetNotShown(JourneyLogger::NOT_SHOWN_REASON_OTHER);\n     client_->OnError(mojom::PaymentErrorReason::USER_CANCEL);\n     OnConnectionTerminated();\n     return;\n   }\n \n   if (!state_) {\n     AreRequestedMethodsSupportedCallback(false);\n     return;\n   }\n\n  is_show_user_gesture_ = is_user_gesture;\n\n  display_handle_->Show(this);\n\n  state_->AreRequestedMethodsSupported(\n      base::BindOnce(&PaymentRequest::AreRequestedMethodsSupportedCallback,\n                     weak_ptr_factory_.GetWeakPtr()));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"display_handle_ = display_manager_->TryShow(delegate_.get());\",\n  \"LINE2\": \"display_handle_->Show(this);\",\n  \"LINE3\": \"client_->OnError(mojom::PaymentErrorReason::ALREADY_SHOWING);\",\n  \"LINE4\": \"client_->OnError(mojom::PaymentErrorReason::USER_CANCEL);\",\n  \"LINE5\": \"state_->AreRequestedMethodsSupported(base::BindOnce(&PaymentRequest::AreRequestedMethodsSupportedCallback, weak_ptr_factory_.GetWeakPtr()));\"\n}\n```",
    "truly_vulnerable_lines": "  if (!client_.is_bound() || !binding_.is_bound()) {\n    LOG(ERROR) << \"Attempted Show(), but binding(s) missing.\";\n    LOG(ERROR) << \"A PaymentRequest UI is already showing\";\n    LOG(ERROR) << \"Cannot show PaymentRequest UI in a background tab\";\n"
  },
  {
    "code": "void PaymentRequest::UpdateWith(mojom::PaymentDetailsPtr details) {\n   std::string error;\n   if (!ValidatePaymentDetails(ConvertPaymentDetails(details), &error)) {\n    LOG(ERROR) << error;\n     OnConnectionTerminated();\n     return;\n   }\n \n   if (details->shipping_address_errors &&\n       !PaymentsValidators::IsValidAddressErrorsFormat(\n           details->shipping_address_errors, &error)) {\n    DLOG(ERROR) << error;\n     OnConnectionTerminated();\n     return;\n   }\n \n   if (!details->total) {\n    LOG(ERROR) << \"Missing total\";\n     OnConnectionTerminated();\n     return;\n   }\n\n  spec_->UpdateWith(std::move(details));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!ValidatePaymentDetails(ConvertPaymentDetails(details), &error)) {\",\n  \"LINE2\": \"if (!details->total) {\",\n  \"LINE3\": \"spec_->UpdateWith(std::move(details));\",\n  \"LINE4\": \"LOG(ERROR) << error;\",\n  \"LINE5\": \"DLOG(ERROR) << error;\"\n}\n```",
    "truly_vulnerable_lines": "    LOG(ERROR) << error;\n    DLOG(ERROR) << error;\n    LOG(ERROR) << \"Missing total\";\n"
  },
  {
    "code": "void RenderFrameHostImpl::CreateMediaStreamDispatcherHost(\n    MediaStreamManager* media_stream_manager,\n    mojom::MediaStreamDispatcherHostRequest request) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  if (!media_stream_dispatcher_host_) {\n    media_stream_dispatcher_host_.reset(new MediaStreamDispatcherHost(\n        GetProcess()->GetID(), GetRoutingID(), media_stream_manager));\n  }\n  media_stream_dispatcher_host_->BindRequest(std::move(request));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"media_stream_dispatcher_host_.reset(new MediaStreamDispatcherHost(GetProcess()->GetID(), GetRoutingID(), media_stream_manager));\",\n  \"LINE2\": \"media_stream_dispatcher_host_->BindRequest(std::move(request));\"\n}\n```",
    "truly_vulnerable_lines": "    MediaStreamManager* media_stream_manager,\n    mojom::MediaStreamDispatcherHostRequest request) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  if (!media_stream_dispatcher_host_) {\n    media_stream_dispatcher_host_.reset(new MediaStreamDispatcherHost(\n        GetProcess()->GetID(), GetRoutingID(), media_stream_manager));\n  }\n  media_stream_dispatcher_host_->BindRequest(std::move(request));\n}\n"
  },
  {
    "code": "void MediaStreamDispatcherHost::BindRequest(\n     mojom::MediaStreamDispatcherHostRequest request) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  bindings_.AddBinding(this, std::move(request));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"void MediaStreamDispatcherHost::BindRequest(\",\n  \"LINE2\": \" mojom::MediaStreamDispatcherHostRequest request) {\",\n  \"LINE3\": \" DCHECK_CURRENTLY_ON(BrowserThread::IO);\",\n  \"LINE4\": \" bindings_.AddBinding(this, std::move(request));\",\n  \"LINE5\": \"}\"\n}\n```",
    "truly_vulnerable_lines": "  bindings_.AddBinding(this, std::move(request));\n"
  },
  {
    "code": " void MediaStreamDispatcherHost::CancelAllRequests() {\n  if (!bindings_.empty())\n    return;\n  media_stream_manager_->CancelAllRequests(render_process_id_,\n                                           render_frame_id_);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"media_stream_manager_->CancelAllRequests(render_process_id_, render_frame_id_);\"\n}\n```",
    "truly_vulnerable_lines": "  if (!bindings_.empty())\n    return;\n  media_stream_manager_->CancelAllRequests(render_process_id_,\n                                           render_frame_id_);\n"
  },
  {
    "code": "void MediaStreamDispatcherHost::CancelRequest(int page_request_id) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n \n   media_stream_manager_->CancelRequest(render_process_id_, render_frame_id_,\n                                       page_request_id);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"media_stream_manager_->CancelRequest(render_process_id_, render_frame_id_, page_request_id);\"\n}\n```",
    "truly_vulnerable_lines": "                                       page_request_id);\n"
  },
  {
    "code": "void MediaStreamDispatcherHost::DoGenerateStream(\n    int32_t page_request_id,\n    const StreamControls& controls,\n    bool user_gesture,\n    GenerateStreamCallback callback,\n    MediaDeviceSaltAndOrigin salt_and_origin) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  if (!MediaStreamManager::IsOriginAllowed(render_process_id_,\n                                           salt_and_origin.origin)) {\n    std::move(callback).Run(MEDIA_DEVICE_INVALID_SECURITY_ORIGIN, std::string(),\n                            MediaStreamDevices(), MediaStreamDevices());\n    return;\n   }\n \n   media_stream_manager_->GenerateStream(\n      render_process_id_, render_frame_id_, page_request_id, controls,\n      std::move(salt_and_origin), user_gesture, std::move(callback),\n       base::BindRepeating(&MediaStreamDispatcherHost::OnDeviceStopped,\n                           weak_factory_.GetWeakPtr()),\n       base::BindRepeating(&MediaStreamDispatcherHost::OnDeviceChanged,\n                          weak_factory_.GetWeakPtr()));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!MediaStreamManager::IsOriginAllowed(render_process_id_, salt_and_origin.origin)) {\",\n  \"LINE2\": \"std::move(callback).Run(MEDIA_DEVICE_INVALID_SECURITY_ORIGIN, std::string(), MediaStreamDevices(), MediaStreamDevices());\",\n  \"LINE3\": \"media_stream_manager_->GenerateStream(\",\n  \"LINE4\": \"render_process_id_, render_frame_id_, page_request_id, controls, std::move(salt_and_origin), user_gesture, std::move(callback),\",\n  \"LINE5\": \"base::BindRepeating(&MediaStreamDispatcherHost::OnDeviceStopped, weak_factory_.GetWeakPtr()),\"\n}\n```",
    "truly_vulnerable_lines": "      render_process_id_, render_frame_id_, page_request_id, controls,\n      std::move(salt_and_origin), user_gesture, std::move(callback),\n"
  },
  {
    "code": "void MediaStreamDispatcherHost::DoOpenDevice(\n    int32_t page_request_id,\n    const std::string& device_id,\n    MediaStreamType type,\n    OpenDeviceCallback callback,\n    MediaDeviceSaltAndOrigin salt_and_origin) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  if (!MediaStreamManager::IsOriginAllowed(render_process_id_,\n                                           salt_and_origin.origin)) {\n    std::move(callback).Run(false /* success */, std::string(),\n                            MediaStreamDevice());\n    return;\n   }\n \n   media_stream_manager_->OpenDevice(\n      render_process_id_, render_frame_id_, page_request_id, device_id, type,\n      std::move(salt_and_origin), std::move(callback),\n       base::BindRepeating(&MediaStreamDispatcherHost::OnDeviceStopped,\n                           weak_factory_.GetWeakPtr()));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"const std::string& device_id\",\n  \"LINE2\": \"media_stream_manager_->OpenDevice(\",\n  \"LINE3\": \"render_process_id_, render_frame_id_, page_request_id, device_id, type,\",\n  \"LINE4\": \"std::move(salt_and_origin), std::move(callback),\",\n  \"LINE5\": \"base::BindRepeating(&MediaStreamDispatcherHost::OnDeviceStopped,\"\n}\n```",
    "truly_vulnerable_lines": "      render_process_id_, render_frame_id_, page_request_id, device_id, type,\n      std::move(salt_and_origin), std::move(callback),\n"
  },
  {
    "code": " MediaStreamDispatcherHost::MediaStreamDispatcherHost(\n     int render_process_id,\n     int render_frame_id,\n     MediaStreamManager* media_stream_manager)\n     : render_process_id_(render_process_id),\n       render_frame_id_(render_frame_id),\n       media_stream_manager_(media_stream_manager),\n       salt_and_origin_callback_(\n           base::BindRepeating(&GetMediaDeviceSaltAndOrigin)),\n       weak_factory_(this) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  bindings_.set_connection_error_handler(\n      base::Bind(&MediaStreamDispatcherHost::CancelAllRequests,\n                 weak_factory_.GetWeakPtr()));\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"bindings_.set_connection_error_handler(\",\n  \"LINE2\": \"base::Bind(&MediaStreamDispatcherHost::CancelAllRequests,\",\n  \"LINE3\": \"weak_factory_.GetWeakPtr()));\"\n}\n```",
    "truly_vulnerable_lines": "  bindings_.set_connection_error_handler(\n      base::Bind(&MediaStreamDispatcherHost::CancelAllRequests,\n                 weak_factory_.GetWeakPtr()));\n"
  },
  {
    "code": " void MediaStreamDispatcherHost::StopStreamDevice(const std::string& device_id,\n                                                  int32_t session_id) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n \n   media_stream_manager_->StopStreamDevice(render_process_id_, render_frame_id_,\n                                          device_id, session_id);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"media_stream_manager_->StopStreamDevice(render_process_id_, render_frame_id_, device_id, session_id);\",\n  \"LINE2\": \"void MediaStreamDispatcherHost::StopStreamDevice(const std::string& device_id, int32_t session_id) {\"\n}\n```",
    "truly_vulnerable_lines": "                                          device_id, session_id);\n"
  },
  {
    "code": " MediaStreamDispatcherHost::~MediaStreamDispatcherHost() {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  bindings_.CloseAllBindings();\n   CancelAllRequests();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"DCHECK_CURRENTLY_ON(BrowserThread::IO);\",\n  \"LINE2\": \"bindings_.CloseAllBindings();\",\n  \"LINE3\": \"CancelAllRequests();\"\n}\n```",
    "truly_vulnerable_lines": "  bindings_.CloseAllBindings();\n"
  },
  {
    "code": " void MediaStreamManager::CancelAllRequests(int render_process_id,\n                                           int render_frame_id) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n   auto request_it = requests_.begin();\n   while (request_it != requests_.end()) {\n     if (request_it->second->requesting_process_id != render_process_id ||\n        request_it->second->requesting_frame_id != render_frame_id) {\n       ++request_it;\n       continue;\n     }\n    const std::string label = request_it->first;\n    ++request_it;\n    CancelRequest(label);\n  }\n}\n",
    "response": "```json\n{\n  \"LINE2\": \"if (request_it->second->requesting_process_id != render_process_id ||\",\n  \"LINE3\": \"request_it->second->requesting_frame_id != render_frame_id) {\",\n  \"LINE4\": \"const std::string label = request_it->first;\",\n  \"LINE5\": \"CancelRequest(label);\"\n}\n```",
    "truly_vulnerable_lines": "                                           int render_frame_id) {\n        request_it->second->requesting_frame_id != render_frame_id) {\n"
  },
  {
    "code": " void MediaStreamManager::GenerateStream(\n     int render_process_id,\n     int render_frame_id,\n     int page_request_id,\n     const StreamControls& controls,\n     MediaDeviceSaltAndOrigin salt_and_origin,\n    bool user_gesture,\n    GenerateStreamCallback generate_stream_cb,\n    DeviceStoppedCallback device_stopped_cb,\n    DeviceChangedCallback device_changed_cb) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n   DVLOG(1) << \"GenerateStream()\";\n \n   DeviceRequest* request = new DeviceRequest(\n      render_process_id, render_frame_id, page_request_id, user_gesture,\n      MEDIA_GENERATE_STREAM, controls, std::move(salt_and_origin),\n       std::move(device_stopped_cb));\n   request->device_changed_cb = std::move(device_changed_cb);\n \n  const std::string& label = AddRequest(request);\n\n  request->generate_stream_cb = std::move(generate_stream_cb);\n\n  if (generate_stream_test_callback_) {\n    if (std::move(generate_stream_test_callback_).Run(controls)) {\n      FinalizeGenerateStream(label, request);\n    } else {\n      FinalizeRequestFailed(label, request, MEDIA_DEVICE_INVALID_STATE);\n    }\n    return;\n  }\n\n  base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\n                           base::BindOnce(&MediaStreamManager::SetUpRequest,\n                                          base::Unretained(this), label));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DeviceRequest* request = new DeviceRequest(\",\n  \"LINE2\": \"const std::string& label = AddRequest(request);\",\n  \"LINE3\": \"base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\",\n  \"LINE4\": \"base::BindOnce(&MediaStreamManager::SetUpRequest,\",\n  \"LINE5\": \"base::Unretained(this), label));\"\n}\n```",
    "truly_vulnerable_lines": "      render_process_id, render_frame_id, page_request_id, user_gesture,\n      MEDIA_GENERATE_STREAM, controls, std::move(salt_and_origin),\n"
  },
  {
    "code": " std::string MediaStreamManager::MakeMediaAccessRequest(\n     int render_process_id,\n     int render_frame_id,\n     int page_request_id,\n     const StreamControls& controls,\n     const url::Origin& security_origin,\n     MediaAccessRequestCallback callback) {\n   DCHECK_CURRENTLY_ON(BrowserThread::IO);\n \n   DeviceRequest* request = new DeviceRequest(\n      render_process_id, render_frame_id, page_request_id,\n       false /* user gesture */, MEDIA_DEVICE_ACCESS, controls,\n       MediaDeviceSaltAndOrigin{std::string() /* salt */,\n                                std::string() /* group_id_salt */,\n                               security_origin});\n\n  const std::string& label = AddRequest(request);\n\n  request->media_access_request_cb = std::move(callback);\n  base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\n                           base::BindOnce(&MediaStreamManager::SetUpRequest,\n                                          base::Unretained(this), label));\n  return label;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DeviceRequest* request = new DeviceRequest(\",\n  \"LINE2\": \"const std::string& label = AddRequest(request);\",\n  \"LINE3\": \"base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\",\n  \"LINE4\": \"base::BindOnce(&MediaStreamManager::SetUpRequest,\",\n  \"LINE5\": \"base::Unretained(this), label));\"\n}\n```",
    "truly_vulnerable_lines": "      render_process_id, render_frame_id, page_request_id,\n"
  },
  {
    "code": " void MediaStreamManager::OpenDevice(int render_process_id,\n                                     int render_frame_id,\n                                     int page_request_id,\n                                     const std::string& device_id,\n                                     MediaStreamType type,\n                                    MediaDeviceSaltAndOrigin salt_and_origin,\n                                    OpenDeviceCallback open_device_cb,\n                                    DeviceStoppedCallback device_stopped_cb) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n  DCHECK(type == MEDIA_DEVICE_AUDIO_CAPTURE ||\n         type == MEDIA_DEVICE_VIDEO_CAPTURE);\n  DVLOG(1) << \"OpenDevice ({page_request_id = \" << page_request_id << \"})\";\n  StreamControls controls;\n  if (IsAudioInputMediaType(type)) {\n    controls.audio.requested = true;\n    controls.audio.stream_type = type;\n    controls.audio.device_id = device_id;\n  } else if (IsVideoInputMediaType(type)) {\n    controls.video.requested = true;\n    controls.video.stream_type = type;\n    controls.video.device_id = device_id;\n  } else {\n     NOTREACHED();\n   }\n   DeviceRequest* request = new DeviceRequest(\n      render_process_id, render_frame_id, page_request_id,\n       false /* user gesture */, MEDIA_OPEN_DEVICE_PEPPER_ONLY, controls,\n       std::move(salt_and_origin), std::move(device_stopped_cb));\n \n  const std::string& label = AddRequest(request);\n\n  request->open_device_cb = std::move(open_device_cb);\n  base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\n                           base::BindOnce(&MediaStreamManager::SetUpRequest,\n                                          base::Unretained(this), label));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DeviceRequest* request = new DeviceRequest(\",\n  \"LINE2\": \"const std::string& label = AddRequest(request);\",\n  \"LINE3\": \"request->open_device_cb = std::move(open_device_cb);\",\n  \"LINE4\": \"base::PostTaskWithTraits(FROM_HERE, {BrowserThread::IO},\",\n  \"LINE5\": \"base::BindOnce(&MediaStreamManager::SetUpRequest,\"\n}\n```",
    "truly_vulnerable_lines": "      render_process_id, render_frame_id, page_request_id,\n"
  },
  {
    "code": "   std::string MakeMediaAccessRequest(int index) {\n     const int render_process_id = 1;\n     const int render_frame_id = 1;\n     const int page_request_id = 1;\n     const url::Origin security_origin;\n     MediaStreamManager::MediaAccessRequestCallback callback =\n         base::BindOnce(&MediaStreamManagerTest::ResponseCallback,\n                        base::Unretained(this), index);\n     StreamControls controls(true, true);\n     return media_stream_manager_->MakeMediaAccessRequest(\n        render_process_id, render_frame_id, page_request_id, controls,\n        security_origin, std::move(callback));\n   }\n",
    "response": "```json\n{\n  \"LINE1\": \"const url::Origin security_origin;\",\n  \"LINE2\": \"MediaStreamManager::MediaAccessRequestCallback callback = base::BindOnce(&MediaStreamManagerTest::ResponseCallback, base::Unretained(this), index);\",\n  \"LINE3\": \"return media_stream_manager_->MakeMediaAccessRequest(render_process_id, render_frame_id, page_request_id, controls, security_origin, std::move(callback));\"\n}\n```",
    "truly_vulnerable_lines": "        render_process_id, render_frame_id, page_request_id, controls,\n        security_origin, std::move(callback));\n"
  },
  {
    "code": " VideoCaptureManager::~VideoCaptureManager() {\n  DCHECK(controllers_.empty());\n   DCHECK(device_start_request_queue_.empty());\n   if (screenlock_monitor_) {\n     screenlock_monitor_->RemoveObserver(this);\n  }\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DCHECK(controllers_.empty());\",\n  \"LINE2\": \"DCHECK(device_start_request_queue_.empty());\",\n  \"LINE3\": \"if (screenlock_monitor_) {\",\n  \"LINE4\": \"screenlock_monitor_->RemoveObserver(this);\",\n  \"LINE5\": \"}\"\n}\n```",
    "truly_vulnerable_lines": "  DCHECK(controllers_.empty());\n"
  },
  {
    "code": "   void OpenSession() {\n     const int render_process_id = 1;\n     const int render_frame_id = 1;\n     const int page_request_id = 1;\n     const url::Origin security_origin =\n         url::Origin::Create(GURL(\"http://test.com\"));\n\n    ASSERT_TRUE(opened_device_label_.empty());\n\n    MediaDeviceInfoArray video_devices;\n    {\n      base::RunLoop run_loop;\n      MediaDevicesManager::BoolDeviceTypes devices_to_enumerate;\n      devices_to_enumerate[MEDIA_DEVICE_TYPE_VIDEO_INPUT] = true;\n      media_stream_manager_->media_devices_manager()->EnumerateDevices(\n          devices_to_enumerate,\n          base::BindOnce(&VideoInputDevicesEnumerated, run_loop.QuitClosure(),\n                         browser_context_.GetMediaDeviceIDSalt(),\n                         security_origin, &video_devices));\n      run_loop.Run();\n    }\n    ASSERT_FALSE(video_devices.empty());\n\n     {\n       base::RunLoop run_loop;\n       media_stream_manager_->OpenDevice(\n          render_process_id, render_frame_id, page_request_id,\n           video_devices[0].device_id, MEDIA_DEVICE_VIDEO_CAPTURE,\n           MediaDeviceSaltAndOrigin{browser_context_.GetMediaDeviceIDSalt(),\n                                    browser_context_.GetMediaDeviceIDSalt(),\n                                   security_origin},\n          base::BindOnce(&VideoCaptureTest::OnDeviceOpened,\n                         base::Unretained(this), run_loop.QuitClosure()),\n          MediaStreamManager::DeviceStoppedCallback());\n      run_loop.Run();\n    }\n    ASSERT_NE(MediaStreamDevice::kNoId, opened_session_id_);\n  }\n",
    "response": "```json\n{\n  \"LINE1\": \"devices_to_enumerate[MEDIA_DEVICE_TYPE_VIDEO_INPUT] = true;\",\n  \"LINE2\": \"media_stream_manager_->media_devices_manager()->EnumerateDevices(\",\n  \"LINE3\": \"render_process_id, render_frame_id, page_request_id, video_devices[0].device_id, MEDIA_DEVICE_VIDEO_CAPTURE,\",\n  \"LINE4\": \"MediaDeviceSaltAndOrigin{browser_context_.GetMediaDeviceIDSalt(), browser_context_.GetMediaDeviceIDSalt(), security_origin},\",\n  \"LINE5\": \"base::BindOnce(&VideoCaptureTest::OnDeviceOpened, base::Unretained(this), run_loop.QuitClosure())\"\n}\n```",
    "truly_vulnerable_lines": "          render_process_id, render_frame_id, page_request_id,\n"
  },
  {
    "code": "void SpeechRecognitionManagerImpl::RecognitionAllowedCallback(int session_id,\n                                                              bool ask_user,\n                                                              bool is_allowed) {\n  DCHECK_CURRENTLY_ON(BrowserThread::IO);\n\n  auto iter = sessions_.find(session_id);\n  if (iter == sessions_.end())\n    return;\n\n  Session* session = iter->second.get();\n\n  if (session->abort_requested)\n    return;\n\n   if (ask_user) {\n     SpeechRecognitionSessionContext& context = session->context;\n     context.label = media_stream_manager_->MakeMediaAccessRequest(\n        context.render_process_id, context.render_frame_id, session_id,\n        StreamControls(true, false), context.security_origin,\n         base::BindOnce(\n             &SpeechRecognitionManagerImpl::MediaRequestPermissionCallback,\n             weak_factory_.GetWeakPtr(), session_id));\n    return;\n  }\n\n  if (is_allowed) {\n    base::ThreadTaskRunnerHandle::Get()->PostTask(\n        FROM_HERE,\n        base::BindOnce(&SpeechRecognitionManagerImpl::DispatchEvent,\n                       weak_factory_.GetWeakPtr(), session_id, EVENT_START));\n  } else {\n    OnRecognitionError(\n        session_id, blink::mojom::SpeechRecognitionError(\n                        blink::mojom::SpeechRecognitionErrorCode::kNotAllowed,\n                        blink::mojom::SpeechAudioErrorDetails::kNone));\n    base::ThreadTaskRunnerHandle::Get()->PostTask(\n        FROM_HERE,\n        base::BindOnce(&SpeechRecognitionManagerImpl::DispatchEvent,\n                       weak_factory_.GetWeakPtr(), session_id, EVENT_ABORT));\n  }\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"context.label = media_stream_manager_->MakeMediaAccessRequest(\",\n  \"LINE2\": \"context.render_process_id, context.render_frame_id, session_id,\",\n  \"LINE3\": \"StreamControls(true, false), context.security_origin,\",\n  \"LINE4\": \"base::BindOnce(&SpeechRecognitionManagerImpl::MediaRequestPermissionCallback, weak_factory_.GetWeakPtr(), session_id));\",\n  \"LINE5\": \"base::ThreadTaskRunnerHandle::Get()->PostTask(\"\n}\n```",
    "truly_vulnerable_lines": "        context.render_process_id, context.render_frame_id, session_id,\n        StreamControls(true, false), context.security_origin,\n"
  },
  {
    "code": "DOMHandler::DOMHandler()\n     : DevToolsDomainHandler(DOM::Metainfo::domainName),\n      host_(nullptr) {\n}\n",
    "response": "{\n  \"LINE1\": \"DOMHandler::DOMHandler()\",\n  \"LINE2\": \": DevToolsDomainHandler(DOM::Metainfo::domainName)\",\n  \"LINE3\": \"host_(nullptr)\"\n}",
    "truly_vulnerable_lines": "      host_(nullptr) {\n}\n"
  },
  {
    "code": "bool RenderFrameDevToolsAgentHost::AttachSession(DevToolsSession* session) {\n  if (!ShouldAllowSession(session))\n    return false;\n\n   protocol::EmulationHandler* emulation_handler =\n       new protocol::EmulationHandler();\n   session->AddHandler(base::WrapUnique(new protocol::BrowserHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::DOMHandler()));\n   session->AddHandler(base::WrapUnique(emulation_handler));\n   session->AddHandler(base::WrapUnique(new protocol::InputHandler()));\n   session->AddHandler(base::WrapUnique(new protocol::InspectorHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::IOHandler(\n      GetIOContext())));\n  session->AddHandler(base::WrapUnique(new protocol::MemoryHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::NetworkHandler(\n      GetId(),\n      frame_tree_node_ ? frame_tree_node_->devtools_frame_token()\n                       : base::UnguessableToken(),\n      GetIOContext())));\n  session->AddHandler(base::WrapUnique(new protocol::SchemaHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::ServiceWorkerHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::StorageHandler()));\n  session->AddHandler(base::WrapUnique(new protocol::TargetHandler(\n      session->client()->MayAttachToBrowser()\n          ? protocol::TargetHandler::AccessMode::kRegular\n          : protocol::TargetHandler::AccessMode::kAutoAttachOnly,\n      GetId(), GetRendererChannel(), session->GetRootSession())));\n  session->AddHandler(base::WrapUnique(new protocol::PageHandler(\n      emulation_handler, session->client()->MayAffectLocalFiles())));\n  session->AddHandler(base::WrapUnique(new protocol::SecurityHandler()));\n  if (!frame_tree_node_ || !frame_tree_node_->parent()) {\n    session->AddHandler(base::WrapUnique(\n        new protocol::TracingHandler(frame_tree_node_, GetIOContext())));\n  }\n\n  if (sessions().empty()) {\n    bool use_video_capture_api = true;\n#ifdef OS_ANDROID\n    if (!CompositorImpl::IsInitialized())\n      use_video_capture_api = false;\n#endif\n    if (!use_video_capture_api)\n      frame_trace_recorder_.reset(new DevToolsFrameTraceRecorder());\n    GrantPolicy();\n#if defined(OS_ANDROID)\n    GetWakeLock()->RequestWakeLock();\n#endif\n  }\n  return true;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"protocol::EmulationHandler* emulation_handler = new protocol::EmulationHandler();\",\n  \"LINE2\": \"session->AddHandler(base::WrapUnique(new protocol::BrowserHandler()));\",\n  \"LINE3\": \"session->AddHandler(base::WrapUnique(new protocol::IOHandler(GetIOContext())));\",\n  \"LINE4\": \"session->AddHandler(base::WrapUnique(new protocol::PageHandler(emulation_handler, session->client()->MayAffectLocalFiles())));\",\n  \"LINE5\": \"frame_trace_recorder_.reset(new DevToolsFrameTraceRecorder());\"\n}\n```",
    "truly_vulnerable_lines": "  session->AddHandler(base::WrapUnique(new protocol::DOMHandler()));\n"
  },
  {
    "code": "bool UnpackOriginPermissions(const std::vector<std::string>& origins_input,\n                             const PermissionSet& required_permissions,\n                             const PermissionSet& optional_permissions,\n                             bool allow_file_access,\n                             UnpackPermissionSetResult* result,\n                             std::string* error) {\n  int user_script_schemes = UserScript::ValidUserScriptSchemes();\n  int explicit_schemes = Extension::kValidHostPermissionSchemes;\n  if (!allow_file_access) {\n    user_script_schemes &= ~URLPattern::SCHEME_FILE;\n     explicit_schemes &= ~URLPattern::SCHEME_FILE;\n   }\n \n   for (const auto& origin_str : origins_input) {\n     URLPattern explicit_origin(explicit_schemes);\n     URLPattern::ParseResult parse_result = explicit_origin.Parse(origin_str);\n    if (URLPattern::ParseResult::kSuccess != parse_result) {\n      *error = ErrorUtils::FormatErrorMessage(\n          kInvalidOrigin, origin_str,\n          URLPattern::GetParseResultString(parse_result));\n       return false;\n     }\n \n     bool used_origin = false;\n     if (required_permissions.explicit_hosts().ContainsPattern(\n             explicit_origin)) {\n      used_origin = true;\n      result->required_explicit_hosts.AddPattern(explicit_origin);\n    } else if (optional_permissions.explicit_hosts().ContainsPattern(\n                   explicit_origin)) {\n      used_origin = true;\n      result->optional_explicit_hosts.AddPattern(explicit_origin);\n    }\n \n     URLPattern scriptable_origin(user_script_schemes);\n     if (scriptable_origin.Parse(origin_str) ==\n            URLPattern::ParseResult::kSuccess &&\n        required_permissions.scriptable_hosts().ContainsPattern(\n            scriptable_origin)) {\n      used_origin = true;\n      result->required_scriptable_hosts.AddPattern(scriptable_origin);\n     }\n \n     if (!used_origin)\n      result->unlisted_hosts.AddPattern(explicit_origin);\n  }\n\n  return true;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (URLPattern::ParseResult::kSuccess != parse_result) {\",\n  \"LINE2\": \"*error = ErrorUtils::FormatErrorMessage(\",\n  \"LINE3\": \"return false;\",\n  \"LINE4\": \"URLPattern scriptable_origin(user_script_schemes);\",\n  \"LINE5\": \"if (!used_origin)\"\n}\n```",
    "truly_vulnerable_lines": "            URLPattern::ParseResult::kSuccess &&\n        required_permissions.scriptable_hosts().ContainsPattern(\n            scriptable_origin)) {\n      used_origin = true;\n      result->required_scriptable_hosts.AddPattern(scriptable_origin);\n"
  },
  {
    "code": " void ChromeContentBrowserClient::OpenURL(\n    content::BrowserContext* browser_context,\n     const content::OpenURLParams& params,\n    const base::Callback<void(content::WebContents*)>& callback) {\n   DCHECK_CURRENTLY_ON(BrowserThread::UI);\n \n #if defined(OS_ANDROID)\n   ServiceTabLauncher::GetInstance()->LaunchTab(browser_context, params,\n                                               callback);\n#else\n  NavigateParams nav_params(Profile::FromBrowserContext(browser_context),\n                            params.url, params.transition);\n  nav_params.FillNavigateParamsFromOpenURLParams(params);\n  nav_params.user_gesture = params.user_gesture;\n\n  Navigate(&nav_params);\n  callback.Run(nav_params.navigated_or_inserted_contents);\n#endif\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"Navigate(&nav_params);\",\n  \"LINE2\": \"callback.Run(nav_params.navigated_or_inserted_contents);\",\n  \"LINE3\": \"ServiceTabLauncher::GetInstance()->LaunchTab(browser_context, params, callback);\"\n}\n```",
    "truly_vulnerable_lines": "    content::BrowserContext* browser_context,\n    const base::Callback<void(content::WebContents*)>& callback) {\n"
  },
  {
    "code": " void WebGL2RenderingContextBase::bindSampler(GLuint unit,\n                                              WebGLSampler* sampler) {\n  if (isContextLost())\n    return;\n   bool deleted;\n   if (!CheckObjectToBeBound(\"bindSampler\", sampler, deleted))\n     return;\n  if (deleted) {\n    SynthesizeGLError(GL_INVALID_OPERATION, \"bindSampler\",\n                      \"attempted to bind a deleted sampler\");\n    return;\n  }\n\n  if (unit >= sampler_units_.size()) {\n    SynthesizeGLError(GL_INVALID_VALUE, \"bindSampler\",\n                      \"texture unit out of range\");\n    return;\n  }\n\n  sampler_units_[unit] = sampler;\n\n  ContextGL()->BindSampler(unit, ObjectOrZero(sampler));\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (unit >= sampler_units_.size()) {\",\n  \"LINE2\": \"sampler_units_[unit] = sampler;\",\n  \"LINE3\": \"ContextGL()->BindSampler(unit, ObjectOrZero(sampler));\",\n  \"LINE4\": \"bool deleted;\",\n  \"LINE5\": \"if (!CheckObjectToBeBound(\\\"bindSampler\\\", sampler, deleted))\"\n}\n```",
    "truly_vulnerable_lines": "  if (isContextLost())\n    return;\n"
  },
  {
    "code": " void WebGL2RenderingContextBase::bindVertexArray(\n     WebGLVertexArrayObject* vertex_array) {\n  if (isContextLost())\n     return;\n  if (vertex_array &&\n      (vertex_array->IsDeleted() || !vertex_array->Validate(nullptr, this))) {\n     SynthesizeGLError(GL_INVALID_OPERATION, \"bindVertexArray\",\n                      \"invalid vertexArray\");\n     return;\n   }\n \n  if (vertex_array && !vertex_array->IsDefaultObject() &&\n      vertex_array->Object()) {\n    ContextGL()->BindVertexArrayOES(ObjectOrZero(vertex_array));\n\n    vertex_array->SetHasEverBeenBound();\n    SetBoundVertexArrayObject(vertex_array);\n  } else {\n    ContextGL()->BindVertexArrayOES(0);\n    SetBoundVertexArrayObject(nullptr);\n  }\n}\n",
    "response": "```json\n{\n  \"LINE2\": \"vertex_array->IsDeleted() || !vertex_array->Validate(nullptr, this)\",\n  \"LINE5\": \"ContextGL()->BindVertexArrayOES(ObjectOrZero(vertex_array))\",\n  \"LINE8\": \"ContextGL()->BindVertexArrayOES(0)\"\n}\n```",
    "truly_vulnerable_lines": "  if (isContextLost())\n  if (vertex_array &&\n      (vertex_array->IsDeleted() || !vertex_array->Validate(nullptr, this))) {\n                      \"invalid vertexArray\");\n"
  },
  {
    "code": " void WebGL2RenderingContextBase::deleteVertexArray(\n     WebGLVertexArrayObject* vertex_array) {\n  if (isContextLost() || !vertex_array)\n     return;\n \n   if (!vertex_array->IsDefaultObject() &&\n      vertex_array == bound_vertex_array_object_)\n    SetBoundVertexArrayObject(nullptr);\n\n  vertex_array->DeleteObject(ContextGL());\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"vertex_array->DeleteObject(ContextGL());\"\n}\n```",
    "truly_vulnerable_lines": "  if (isContextLost() || !vertex_array)\n"
  },
  {
    "code": "void WebGL2RenderingContextBase::framebufferTextureLayer(GLenum target,\n                                                         GLenum attachment,\n                                                         WebGLTexture* texture,\n                                                         GLint level,\n                                                         GLint layer) {\n  if (isContextLost() || !ValidateFramebufferFuncParameters(\n                              \"framebufferTextureLayer\", target, attachment))\n     return;\n   if (texture && !texture->Validate(ContextGroup(), this)) {\n    SynthesizeGLError(GL_INVALID_VALUE, \"framebufferTextureLayer\",\n                      \"no texture or texture not from this context\");\n     return;\n   }\n   GLenum textarget = texture ? texture->GetTarget() : 0;\n  if (texture) {\n    if (textarget != GL_TEXTURE_3D && textarget != GL_TEXTURE_2D_ARRAY) {\n      SynthesizeGLError(GL_INVALID_OPERATION, \"framebufferTextureLayer\",\n                        \"invalid texture type\");\n      return;\n    }\n    if (!ValidateTexFuncLayer(\"framebufferTextureLayer\", textarget, layer))\n      return;\n    if (!ValidateTexFuncLevel(\"framebufferTextureLayer\", textarget, level))\n      return;\n  }\n\n  WebGLFramebuffer* framebuffer_binding = GetFramebufferBinding(target);\n  if (!framebuffer_binding || !framebuffer_binding->Object()) {\n    SynthesizeGLError(GL_INVALID_OPERATION, \"framebufferTextureLayer\",\n                      \"no framebuffer bound\");\n    return;\n  }\n  if (framebuffer_binding && framebuffer_binding->Opaque()) {\n    SynthesizeGLError(GL_INVALID_OPERATION, \"framebufferTextureLayer\",\n                      \"opaque framebuffer bound\");\n    return;\n  }\n  framebuffer_binding->SetAttachmentForBoundFramebuffer(\n      target, attachment, textarget, texture, level, layer);\n  ApplyStencilTest();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (texture && !texture->Validate(ContextGroup(), this)) {\",\n  \"LINE2\": \"if (textarget != GL_TEXTURE_3D && textarget != GL_TEXTURE_2D_ARRAY) {\",\n  \"LINE3\": \"if (framebuffer_binding && framebuffer_binding->Opaque()) {\",\n  \"LINE4\": \"framebuffer_binding->SetAttachmentForBoundFramebuffer(target, attachment, textarget, texture, level, layer);\",\n  \"LINE5\": \"ApplyStencilTest();\"\n}\n```",
    "truly_vulnerable_lines": "    SynthesizeGLError(GL_INVALID_VALUE, \"framebufferTextureLayer\",\n                      \"no texture or texture not from this context\");\n"
  },
  {
    "code": " GLboolean WebGL2RenderingContextBase::isTransformFeedback(\n     WebGLTransformFeedback* feedback) {\n  if (isContextLost() || !feedback)\n     return 0;\n \n   if (!feedback->HasEverBeenBound())\n    return 0;\n\n  return ContextGL()->IsTransformFeedback(feedback->Object());\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (isContextLost() || !feedback)\",\n  \"LINE2\": \"if (!feedback->HasEverBeenBound())\",\n  \"LINE3\": \"return ContextGL()->IsTransformFeedback(feedback->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (isContextLost() || !feedback)\n"
  },
  {
    "code": " GLboolean WebGL2RenderingContextBase::isVertexArray(\n     WebGLVertexArrayObject* vertex_array) {\n  if (isContextLost() || !vertex_array)\n     return 0;\n \n   if (!vertex_array->HasEverBeenBound())\n    return 0;\n\n  return ContextGL()->IsVertexArrayOES(vertex_array->Object());\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (isContextLost() || !vertex_array)\",\n  \"LINE2\": \"if (!vertex_array->HasEverBeenBound())\",\n  \"LINE3\": \"return ContextGL()->IsVertexArrayOES(vertex_array->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (isContextLost() || !vertex_array)\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isBuffer(WebGLBuffer* buffer) {\n  if (!buffer || isContextLost())\n     return 0;\n \n   if (!buffer->HasEverBeenBound())\n    return 0;\n  if (buffer->IsDeleted())\n    return 0;\n\n  return ContextGL()->IsBuffer(buffer->Object());\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!buffer || isContextLost())\",\n  \"LINE2\": \"if (!buffer->HasEverBeenBound())\",\n  \"LINE3\": \"if (buffer->IsDeleted())\",\n  \"LINE4\": \"return ContextGL()->IsBuffer(buffer->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (!buffer || isContextLost())\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isFramebuffer(\n     WebGLFramebuffer* framebuffer) {\n  if (!framebuffer || isContextLost())\n     return 0;\n \n   if (!framebuffer->HasEverBeenBound())\n    return 0;\n  if (framebuffer->IsDeleted())\n    return 0;\n\n  return ContextGL()->IsFramebuffer(framebuffer->Object());\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!framebuffer || isContextLost())\",\n  \"LINE2\": \"if (!framebuffer->HasEverBeenBound())\",\n  \"LINE3\": \"if (framebuffer->IsDeleted())\",\n  \"LINE4\": \"return ContextGL()->IsFramebuffer(framebuffer->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (!framebuffer || isContextLost())\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isProgram(WebGLProgram* program) {\n  if (!program || isContextLost())\n     return 0;\n \n   return ContextGL()->IsProgram(program->Object());\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!program || isContextLost())\",\n  \"LINE2\": \"return ContextGL()->IsProgram(program->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (!program || isContextLost())\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isRenderbuffer(\n     WebGLRenderbuffer* renderbuffer) {\n  if (!renderbuffer || isContextLost())\n     return 0;\n \n   if (!renderbuffer->HasEverBeenBound())\n    return 0;\n  if (renderbuffer->IsDeleted())\n    return 0;\n\n  return ContextGL()->IsRenderbuffer(renderbuffer->Object());\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!renderbuffer || isContextLost())\",\n  \"LINE2\": \"if (!renderbuffer->HasEverBeenBound())\",\n  \"LINE3\": \"if (renderbuffer->IsDeleted())\",\n  \"LINE4\": \"return ContextGL()->IsRenderbuffer(renderbuffer->Object());\"\n}\n```",
    "truly_vulnerable_lines": "  if (!renderbuffer || isContextLost())\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isShader(WebGLShader* shader) {\n  if (!shader || isContextLost())\n     return 0;\n \n   return ContextGL()->IsShader(shader->Object());\n }\n",
    "response": "{\n  \"LINE1\": \"if (!shader || isContextLost())\",\n  \"LINE2\": \"return 0;\",\n  \"LINE3\": \"return ContextGL()->IsShader(shader->Object());\"\n}",
    "truly_vulnerable_lines": "  if (!shader || isContextLost())\n"
  },
  {
    "code": " GLboolean WebGLRenderingContextBase::isTexture(WebGLTexture* texture) {\n  if (!texture || isContextLost())\n     return 0;\n \n   if (!texture->HasEverBeenBound())\n    return 0;\n  if (texture->IsDeleted())\n    return 0;\n\n  return ContextGL()->IsTexture(texture->Object());\n}\n",
    "response": "{\n  \"LINE1\": \"if (!texture || isContextLost())\",\n  \"LINE2\": \"if (!texture->HasEverBeenBound())\",\n  \"LINE3\": \"if (texture->IsDeleted())\",\n  \"LINE4\": \"return ContextGL()->IsTexture(texture->Object());\"\n}",
    "truly_vulnerable_lines": "  if (!texture || isContextLost())\n"
  },
  {
    "code": " void GCInfoTable::EnsureGCInfoIndex(const GCInfo* gc_info,\n                                     size_t* gc_info_index_slot) {\n   DCHECK(gc_info);\n   DCHECK(gc_info_index_slot);\n  DEFINE_THREAD_SAFE_STATIC_LOCAL(Mutex, mutex, ());\n  MutexLocker locker(mutex);\n \n   if (*gc_info_index_slot)\n     return;\n \n  int index = ++gc_info_index_;\n   size_t gc_info_index = static_cast<size_t>(index);\n   CHECK(gc_info_index < GCInfoTable::kMaxIndex);\n  if (gc_info_index >= gc_info_table_size_)\n     Resize();\n \n  g_gc_info_table[gc_info_index] = gc_info;\n   ReleaseStore(reinterpret_cast<int*>(gc_info_index_slot), index);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"int index = ++gc_info_index_;\",\n  \"LINE2\": \"size_t gc_info_index = static_cast<size_t>(index);\",\n  \"LINE3\": \"if (gc_info_index >= gc_info_table_size_)\",\n  \"LINE4\": \"Resize();\",\n  \"LINE5\": \"g_gc_info_table[gc_info_index] = gc_info;\"\n}\n```",
    "truly_vulnerable_lines": "  DEFINE_THREAD_SAFE_STATIC_LOCAL(Mutex, mutex, ());\n  MutexLocker locker(mutex);\n  int index = ++gc_info_index_;\n  if (gc_info_index >= gc_info_table_size_)\n  g_gc_info_table[gc_info_index] = gc_info;\n"
  },
  {
    "code": "void GCInfoTable::Init() {\n  CHECK(!g_gc_info_table);\n   Resize();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"CHECK(!g_gc_info_table);\",\n  \"LINE2\": \"Resize();\"\n}\n```",
    "truly_vulnerable_lines": "  CHECK(!g_gc_info_table);\n"
  },
  {
    "code": " void GCInfoTable::Resize() {\n  static const int kGcInfoZapValue = 0x33;\n  const size_t kInitialSize = 512;\n  size_t new_size =\n      gc_info_table_size_ ? 2 * gc_info_table_size_ : kInitialSize;\n  DCHECK(new_size < GCInfoTable::kMaxIndex);\n  g_gc_info_table =\n      reinterpret_cast<GCInfo const**>(WTF::Partitions::FastRealloc(\n          g_gc_info_table, new_size * sizeof(GCInfo), \"GCInfo\"));\n  DCHECK(g_gc_info_table);\n  memset(reinterpret_cast<uint8_t*>(g_gc_info_table) +\n             gc_info_table_size_ * sizeof(GCInfo),\n         kGcInfoZapValue, (new_size - gc_info_table_size_) * sizeof(GCInfo));\n  gc_info_table_size_ = new_size;\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"DCHECK(new_size < GCInfoTable::kMaxIndex);\",\n  \"LINE2\": \"g_gc_info_table = reinterpret_cast<GCInfo const**>(WTF::Partitions::FastRealloc(g_gc_info_table, new_size * sizeof(GCInfo), \\\"GCInfo\\\"));\",\n  \"LINE3\": \"memset(reinterpret_cast<uint8_t*>(g_gc_info_table) + gc_info_table_size_ * sizeof(GCInfo), kGcInfoZapValue, (new_size - gc_info_table_size_) * sizeof(GCInfo));\",\n  \"LINE4\": \"DCHECK(g_gc_info_table);\"\n}\n```",
    "truly_vulnerable_lines": "  static const int kGcInfoZapValue = 0x33;\n  const size_t kInitialSize = 512;\n  size_t new_size =\n      gc_info_table_size_ ? 2 * gc_info_table_size_ : kInitialSize;\n  DCHECK(new_size < GCInfoTable::kMaxIndex);\n  g_gc_info_table =\n      reinterpret_cast<GCInfo const**>(WTF::Partitions::FastRealloc(\n          g_gc_info_table, new_size * sizeof(GCInfo), \"GCInfo\"));\n  DCHECK(g_gc_info_table);\n  memset(reinterpret_cast<uint8_t*>(g_gc_info_table) +\n             gc_info_table_size_ * sizeof(GCInfo),\n         kGcInfoZapValue, (new_size - gc_info_table_size_) * sizeof(GCInfo));\n  gc_info_table_size_ = new_size;\n"
  },
  {
    "code": "void ThreadHeap::WriteBarrier(void* value) {\n  DCHECK(thread_state_->IsIncrementalMarking());\n  DCHECK(value);\n  DCHECK_NE(value, reinterpret_cast<void*>(-1));\n\n  BasePage* const page = PageFromObject(value);\n  HeapObjectHeader* const header =\n      page->IsLargeObjectPage()\n          ? static_cast<LargeObjectPage*>(page)->GetHeapObjectHeader()\n          : static_cast<NormalPage*>(page)->FindHeaderFromAddress(\n                reinterpret_cast<Address>(const_cast<void*>(value)));\n  if (header->IsMarked())\n    return;\n\n   header->Mark();\n   marking_worklist_->Push(\n       WorklistTaskId::MainThread,\n      {header->Payload(), ThreadHeap::GcInfo(header->GcInfoIndex())->trace_});\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"BasePage* const page = PageFromObject(value);\",\n  \"LINE2\": \"HeapObjectHeader* const header = page->IsLargeObjectPage() ? static_cast<LargeObjectPage*>(page)->GetHeapObjectHeader() : static_cast<NormalPage*>(page)->FindHeaderFromAddress(reinterpret_cast<Address>(const_cast<void*>(value)));\",\n  \"LINE3\": \"if (header->IsMarked()) return;\",\n  \"LINE4\": \"header->Mark();\",\n  \"LINE5\": \"marking_worklist_->Push(WorklistTaskId::MainThread, {header->Payload(), ThreadHeap::GcInfo(header->GcInfoIndex())->trace_});\"\n}\n```",
    "truly_vulnerable_lines": "      {header->Payload(), ThreadHeap::GcInfo(header->GcInfoIndex())->trace_});\n"
  },
  {
    "code": " void HeapObjectHeader::Finalize(Address object, size_t object_size) {\n   HeapAllocHooks::FreeHookIfEnabled(object);\n  const GCInfo* gc_info = ThreadHeap::GcInfo(GcInfoIndex());\n   if (gc_info->HasFinalizer())\n     gc_info->finalize_(object);\n \n  ASAN_RETIRE_CONTAINER_ANNOTATION(object, object_size);\n}\n",
    "response": "{\n  \"LINE1\": \"const GCInfo* gc_info = ThreadHeap::GcInfo(GcInfoIndex());\",\n  \"LINE2\": \"if (gc_info->HasFinalizer())\",\n  \"LINE3\": \"gc_info->finalize_(object);\",\n  \"LINE4\": \"\",\n  \"LINE5\": \"\"\n}",
    "truly_vulnerable_lines": "  const GCInfo* gc_info = ThreadHeap::GcInfo(GcInfoIndex());\n"
  },
  {
    "code": "  void ProcessBackingStore(HeapObjectHeader* header) {\n     EXPECT_TRUE(header->IsValid());\n     EXPECT_TRUE(header->IsMarked());\n     header->Unmark();\n    ThreadHeap::GcInfo(header->GcInfoIndex())->trace_(this, header->Payload());\n   }\n",
    "response": "```json\n{\n  \"LINE1\": \"EXPECT_TRUE(header->IsValid());\",\n  \"LINE2\": \"EXPECT_TRUE(header->IsMarked());\",\n  \"LINE3\": \"header->Unmark();\",\n  \"LINE4\": \"ThreadHeap::GcInfo(header->GcInfoIndex())->trace_(this, header->Payload());\"\n}\n```",
    "truly_vulnerable_lines": "    ThreadHeap::GcInfo(header->GcInfoIndex())->trace_(this, header->Payload());\n"
  },
  {
    "code": " void MarkingVisitor::ConservativelyMarkHeader(HeapObjectHeader* header) {\n  const GCInfo* gc_info = ThreadHeap::GcInfo(header->GcInfoIndex());\n   if (gc_info->HasVTable() && !VTableInitialized(header->Payload())) {\n    MarkHeaderNoTracing(header);\n#if DCHECK_IS_ON()\n    DCHECK(IsUninitializedMemory(header->Payload(), header->PayloadSize()));\n#endif\n  } else {\n    MarkHeader(header, gc_info->trace_);\n  }\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (gc_info->HasVTable() && !VTableInitialized(header->Payload())) {\",\n  \"LINE2\": \"MarkHeaderNoTracing(header);\",\n  \"LINE3\": \"DCHECK(IsUninitializedMemory(header->Payload(), header->PayloadSize()));\",\n  \"LINE4\": \"MarkHeader(header, gc_info->trace_);\"\n}\n```",
    "truly_vulnerable_lines": "  const GCInfo* gc_info = ThreadHeap::GcInfo(header->GcInfoIndex());\n"
  },
  {
    "code": "void ProcessHeap::Init() {\n  total_allocated_space_ = 0;\n   total_allocated_object_size_ = 0;\n   total_marked_object_size_ = 0;\n \n  GCInfoTable::Init();\n   base::SamplingHeapProfiler::SetHooksInstallCallback([]() {\n     HeapAllocHooks::SetAllocationHook(&BlinkGCAllocHook);\n     HeapAllocHooks::SetFreeHook(&BlinkGCFreeHook);\n  });\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"HeapAllocHooks::SetAllocationHook(&BlinkGCAllocHook);\",\n  \"LINE2\": \"HeapAllocHooks::SetFreeHook(&BlinkGCFreeHook);\"\n}\n```",
    "truly_vulnerable_lines": "  GCInfoTable::Init();\n"
  },
  {
    "code": "bool Performance::PassesTimingAllowCheck(\n    const ResourceResponse& response,\n     const SecurityOrigin& initiator_security_origin,\n     const AtomicString& original_timing_allow_origin,\n     ExecutionContext* context) {\n   scoped_refptr<const SecurityOrigin> resource_origin =\n      SecurityOrigin::Create(response.Url());\n   if (resource_origin->IsSameSchemeHostPort(&initiator_security_origin))\n     return true;\n \n  const AtomicString& timing_allow_origin_string =\n      original_timing_allow_origin.IsEmpty()\n          ? response.HttpHeaderField(HTTPNames::Timing_Allow_Origin)\n          : original_timing_allow_origin;\n  if (timing_allow_origin_string.IsEmpty() ||\n      EqualIgnoringASCIICase(timing_allow_origin_string, \"null\"))\n    return false;\n\n  if (timing_allow_origin_string == \"*\") {\n    UseCounter::Count(context, WebFeature::kStarInTimingAllowOrigin);\n    return true;\n  }\n\n  const String& security_origin = initiator_security_origin.ToString();\n  Vector<String> timing_allow_origins;\n  timing_allow_origin_string.GetString().Split(',', timing_allow_origins);\n  if (timing_allow_origins.size() > 1) {\n    UseCounter::Count(context, WebFeature::kMultipleOriginsInTimingAllowOrigin);\n  } else if (timing_allow_origins.size() == 1 &&\n             timing_allow_origin_string != \"*\") {\n    UseCounter::Count(context, WebFeature::kSingleOriginInTimingAllowOrigin);\n  }\n  for (const String& allow_origin : timing_allow_origins) {\n    const String allow_origin_stripped = allow_origin.StripWhiteSpace();\n    if (allow_origin_stripped == security_origin ||\n        allow_origin_stripped == \"*\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"scoped_refptr<const SecurityOrigin> resource_origin = SecurityOrigin::Create(response.Url());\",\n  \"LINE2\": \"const AtomicString& timing_allow_origin_string = original_timing_allow_origin.IsEmpty() ? response.HttpHeaderField(HTTPNames::Timing_Allow_Origin) : original_timing_allow_origin;\",\n  \"LINE3\": \"timing_allow_origin_string.GetString().Split(',', timing_allow_origins);\",\n  \"LINE4\": \"for (const String& allow_origin : timing_allow_origins) {\",\n  \"LINE5\": \"const String allow_origin_stripped = allow_origin.StripWhiteSpace();\"\n}\n```",
    "truly_vulnerable_lines": "      SecurityOrigin::Create(response.Url());\n"
  },
  {
    "code": "MediaElementAudioSourceHandler::MediaElementAudioSourceHandler(\n    AudioNode& node,\n    HTMLMediaElement& media_element)\n    : AudioHandler(kNodeTypeMediaElementAudioSource,\n                   node,\n                   node.context()->sampleRate()),\n       media_element_(media_element),\n       source_number_of_channels_(0),\n       source_sample_rate_(0),\n      passes_current_src_cors_access_check_(\n          PassesCurrentSrcCORSAccessCheck(media_element.currentSrc())),\n      maybe_print_cors_message_(!passes_current_src_cors_access_check_),\n      current_src_string_(media_element.currentSrc().GetString()) {\n   DCHECK(IsMainThread());\n  AddOutput(2);\n\n  if (Context()->GetExecutionContext()) {\n    task_runner_ = Context()->GetExecutionContext()->GetTaskRunner(\n        TaskType::kMediaElementEvent);\n  }\n\n  Initialize();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"passes_current_src_cors_access_check_(PassesCurrentSrcCORSAccessCheck(media_element.currentSrc())),\",\n  \"LINE2\": \"maybe_print_cors_message_(!passes_current_src_cors_access_check_),\",\n  \"LINE3\": \"current_src_string_(media_element.currentSrc().GetString())\"\n}\n```",
    "truly_vulnerable_lines": "      passes_current_src_cors_access_check_(\n          PassesCurrentSrcCORSAccessCheck(media_element.currentSrc())),\n      maybe_print_cors_message_(!passes_current_src_cors_access_check_),\n      current_src_string_(media_element.currentSrc().GetString()) {\n"
  },
  {
    "code": "void MediaElementAudioSourceHandler::OnCurrentSrcChanged(\n    const KURL& current_src) {\n  DCHECK(IsMainThread());\n  Locker<MediaElementAudioSourceHandler> locker(*this);\n \n  passes_current_src_cors_access_check_ =\n      PassesCurrentSrcCORSAccessCheck(current_src);\n \n  maybe_print_cors_message_ = !passes_current_src_cors_access_check_;\n  current_src_string_ = current_src.GetString();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"passes_current_src_cors_access_check_ = PassesCurrentSrcCORSAccessCheck(current_src);\",\n  \"LINE2\": \"maybe_print_cors_message_ = !passes_current_src_cors_access_check_;\",\n  \"LINE3\": \"current_src_string_ = current_src.GetString();\"\n}\n```",
    "truly_vulnerable_lines": "    const KURL& current_src) {\n  DCHECK(IsMainThread());\n  Locker<MediaElementAudioSourceHandler> locker(*this);\n  passes_current_src_cors_access_check_ =\n      PassesCurrentSrcCORSAccessCheck(current_src);\n  maybe_print_cors_message_ = !passes_current_src_cors_access_check_;\n  current_src_string_ = current_src.GetString();\n}\n"
  },
  {
    "code": "void MediaElementAudioSourceNode::OnCurrentSrcChanged(const KURL& current_src) {\n  GetMediaElementAudioSourceHandler().OnCurrentSrcChanged(current_src);\n}\n",
    "response": "{\n  \"LINE1\": \"void MediaElementAudioSourceNode::OnCurrentSrcChanged(const KURL& current_src) {\",\n  \"LINE2\": \"GetMediaElementAudioSourceHandler().OnCurrentSrcChanged(current_src);\",\n  \"LINE3\": \"}\",\n  \"LINE4\": \"\",\n  \"LINE5\": \"\"\n}",
    "truly_vulnerable_lines": "  GetMediaElementAudioSourceHandler().OnCurrentSrcChanged(current_src);\n}\n"
  },
  {
    "code": "bool MediaElementAudioSourceHandler::PassesCORSAccessCheck() {\n  DCHECK(MediaElement());\n  return (MediaElement()->GetWebMediaPlayer() &&\n          MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) ||\n         passes_current_src_cors_access_check_;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"return (MediaElement()->GetWebMediaPlayer() &&\",\n  \"LINE2\": \"MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) ||\",\n  \"LINE3\": \"passes_current_src_cors_access_check_;\"\n}\n```",
    "truly_vulnerable_lines": "  DCHECK(MediaElement());\n  return (MediaElement()->GetWebMediaPlayer() &&\n          MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) ||\n         passes_current_src_cors_access_check_;\n}\n"
  },
  {
    "code": "bool MediaElementAudioSourceHandler::PassesCurrentSrcCORSAccessCheck(\n    const KURL& current_src) {\n  DCHECK(IsMainThread());\n  return Context()->GetSecurityOrigin() &&\n         Context()->GetSecurityOrigin()->CanRequest(current_src);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"Context()->GetSecurityOrigin()\",\n  \"LINE2\": \"Context()->GetSecurityOrigin()->CanRequest(current_src)\"\n}\n```",
    "truly_vulnerable_lines": "    const KURL& current_src) {\n  DCHECK(IsMainThread());\n  return Context()->GetSecurityOrigin() &&\n         Context()->GetSecurityOrigin()->CanRequest(current_src);\n"
  },
  {
    "code": "void MediaElementAudioSourceHandler::Process(size_t number_of_frames) {\n  AudioBus* output_bus = Output(0).Bus();\n\n  MutexTryLocker try_locker(process_lock_);\n  if (try_locker.Locked()) {\n    if (!MediaElement() || !source_sample_rate_) {\n      output_bus->Zero();\n      return;\n    }\n\n    if (source_number_of_channels_ != output_bus->NumberOfChannels()) {\n      output_bus->Zero();\n      return;\n    }\n\n    AudioSourceProvider& provider = MediaElement()->GetAudioSourceProvider();\n    if (multi_channel_resampler_.get()) {\n      DCHECK_NE(source_sample_rate_, Context()->sampleRate());\n      multi_channel_resampler_->Process(&provider, output_bus,\n                                        number_of_frames);\n    } else {\n      DCHECK_EQ(source_sample_rate_, Context()->sampleRate());\n       provider.ProvideInput(output_bus, number_of_frames);\n     }\n    if (!PassesCORSAccessCheck()) {\n      if (maybe_print_cors_message_) {\n        maybe_print_cors_message_ = false;\n        PostCrossThreadTask(\n            *task_runner_, FROM_HERE,\n            CrossThreadBind(&MediaElementAudioSourceHandler::PrintCORSMessage,\n                            WrapRefCounted(this), current_src_string_));\n      }\n       output_bus->Zero();\n     }\n   } else {\n    output_bus->Zero();\n  }\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!PassesCORSAccessCheck()) {\",\n  \"LINE2\": \"PostCrossThreadTask(\",\n  \"LINE3\": \"CrossThreadBind(&MediaElementAudioSourceHandler::PrintCORSMessage,\",\n  \"LINE4\": \"provider.ProvideInput(output_bus, number_of_frames);\",\n  \"LINE5\": \"multi_channel_resampler_->Process(&provider, output_bus, number_of_frames);\"\n}\n```",
    "truly_vulnerable_lines": "    if (!PassesCORSAccessCheck()) {\n      if (maybe_print_cors_message_) {\n        maybe_print_cors_message_ = false;\n        PostCrossThreadTask(\n            *task_runner_, FROM_HERE,\n            CrossThreadBind(&MediaElementAudioSourceHandler::PrintCORSMessage,\n                            WrapRefCounted(this), current_src_string_));\n      }\n"
  },
  {
    "code": "ExtensionInstallDialogView::ExtensionInstallDialogView(\n    Profile* profile,\n    content::PageNavigator* navigator,\n    const ExtensionInstallPrompt::DoneCallback& done_callback,\n    std::unique_ptr<ExtensionInstallPrompt::Prompt> prompt)\n    : profile_(profile),\n      navigator_(navigator),\n      done_callback_(done_callback),\n       prompt_(std::move(prompt)),\n       container_(NULL),\n       scroll_view_(NULL),\n      handled_result_(false) {\n   InitView();\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"container_(NULL)\",\n  \"LINE2\": \"scroll_view_(NULL)\",\n  \"LINE3\": \"done_callback_(done_callback)\",\n  \"LINE4\": \"prompt_(std::move(prompt))\",\n  \"LINE5\": \"handled_result_(false)\"\n}\n```\n",
    "truly_vulnerable_lines": "      handled_result_(false) {\n"
  },
  {
    "code": " ExtensionFunction::ResponseAction BluetoothSocketSendFunction::Run() {\n   DCHECK_CURRENTLY_ON(work_thread_id());\n \n  auto params = bluetooth_socket::Send::Params::Create(*args_);\n  EXTENSION_FUNCTION_VALIDATE(params.get());\n \n  io_buffer_size_ = params->data.size();\n  io_buffer_ = new net::WrappedIOBuffer(params->data.data());\n \n  BluetoothApiSocket* socket = GetSocket(params->socket_id);\n   if (!socket)\n     return RespondNow(Error(kSocketNotFoundError));\n \n  socket->Send(io_buffer_,\n               io_buffer_size_,\n               base::Bind(&BluetoothSocketSendFunction::OnSuccess, this),\n               base::Bind(&BluetoothSocketSendFunction::OnError, this));\n  return did_respond() ? AlreadyResponded() : RespondLater();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"io_buffer_size_ = params->data.size();\",\n  \"LINE2\": \"io_buffer_ = new net::WrappedIOBuffer(params->data.data());\",\n  \"LINE3\": \"BluetoothApiSocket* socket = GetSocket(params->socket_id);\",\n  \"LINE4\": \"if (!socket) return RespondNow(Error(kSocketNotFoundError));\",\n  \"LINE5\": \"socket->Send(io_buffer_, io_buffer_size_, base::Bind(&BluetoothSocketSendFunction::OnSuccess, this), base::Bind(&BluetoothSocketSendFunction::OnError, this));\"\n}\n```",
    "truly_vulnerable_lines": "  auto params = bluetooth_socket::Send::Params::Create(*args_);\n  EXTENSION_FUNCTION_VALIDATE(params.get());\n  io_buffer_size_ = params->data.size();\n  io_buffer_ = new net::WrappedIOBuffer(params->data.data());\n  BluetoothApiSocket* socket = GetSocket(params->socket_id);\n"
  },
  {
    "code": " void HTMLMediaElement::ChangeNetworkStateFromLoadingToIdle() {\n   progress_event_timer_.Stop();\n \n  if (GetWebMediaPlayer() && GetWebMediaPlayer()->DidLoadingProgress())\n    ScheduleEvent(EventTypeNames::progress);\n  ScheduleEvent(EventTypeNames::suspend);\n  SetNetworkState(kNetworkIdle);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (GetWebMediaPlayer() && GetWebMediaPlayer()->DidLoadingProgress())\",\n  \"LINE2\": \"ScheduleEvent(EventTypeNames::progress);\",\n  \"LINE3\": \"ScheduleEvent(EventTypeNames::suspend);\",\n  \"LINE4\": \"SetNetworkState(kNetworkIdle);\"\n}\n```",
    "truly_vulnerable_lines": "  if (GetWebMediaPlayer() && GetWebMediaPlayer()->DidLoadingProgress())\n    ScheduleEvent(EventTypeNames::progress);\n  ScheduleEvent(EventTypeNames::suspend);\n  SetNetworkState(kNetworkIdle);\n"
  },
  {
    "code": " void HTMLMediaElement::MediaLoadingFailed(WebMediaPlayer::NetworkState error,\n                                          const String& message) {\n   BLINK_MEDIA_LOG << \"MediaLoadingFailed(\" << (void*)this << \", \"\n                  << static_cast<int>(error) << \", message='\" << message\n                   << \"')\";\n \n   StopPeriodicTimers();\n \n  if (ready_state_ < kHaveMetadata &&\n      load_state_ == kLoadingFromSourceElement) {\n    if (current_source_node_) {\n      current_source_node_->ScheduleErrorEvent();\n    } else {\n      BLINK_MEDIA_LOG << \"mediaLoadingFailed(\" << (void*)this\n                      << \") - error event not sent, <source> was removed\";\n    }\n\n\n    ForgetResourceSpecificTracks();\n\n    if (HavePotentialSourceChild()) {\n      BLINK_MEDIA_LOG << \"mediaLoadingFailed(\" << (void*)this\n                      << \") - scheduling next <source>\";\n      ScheduleNextSourceChild();\n    } else {\n      BLINK_MEDIA_LOG << \"mediaLoadingFailed(\" << (void*)this\n                      << \") - no more <source> elements, waiting\";\n      WaitForSourceChange();\n    }\n\n    return;\n  }\n\n  if (error == WebMediaPlayer::kNetworkStateNetworkError &&\n      ready_state_ >= kHaveMetadata) {\n    MediaEngineError(MediaError::Create(MediaError::kMediaErrNetwork, message));\n  } else if (error == WebMediaPlayer::kNetworkStateDecodeError) {\n    MediaEngineError(MediaError::Create(MediaError::kMediaErrDecode, message));\n  } else if ((error == WebMediaPlayer::kNetworkStateFormatError ||\n              error == WebMediaPlayer::kNetworkStateNetworkError) &&\n             load_state_ == kLoadingFromSrcAttr) {\n    if (message.IsEmpty()) {\n      NoneSupported(BuildElementErrorMessage(\n          error == WebMediaPlayer::kNetworkStateFormatError ? \"Format error\"\n                                                            : \"Network error\"));\n    } else {\n      NoneSupported(message);\n    }\n  }\n\n  UpdateDisplayState();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"BLINK_MEDIA_LOG << \\\"MediaLoadingFailed(\\\" << (void*)this << \\\", \\\" << static_cast<int>(error) << \\\", message='\\\" << message << \\\"')\\\";\",\n  \"LINE2\": \"BLINK_MEDIA_LOG << \\\"mediaLoadingFailed(\\\" << (void*)this << \\\") - error event not sent, <source> was removed\\\";\",\n  \"LINE3\": \"BLINK_MEDIA_LOG << \\\"mediaLoadingFailed(\\\" << (void*)this << \\\") - scheduling next <source>\\\";\",\n  \"LINE4\": \"BLINK_MEDIA_LOG << \\\"mediaLoadingFailed(\\\" << (void*)this << \\\") - no more <source> elements, waiting\\\";\",\n  \"LINE5\": \"NoneSupported(message);\"\n}\n```",
    "truly_vulnerable_lines": "                                          const String& message) {\n                  << static_cast<int>(error) << \", message='\" << message\n"
  },
  {
    "code": "void HTMLMediaElement::NoneSupported(const String& message) {\n  BLINK_MEDIA_LOG << \"NoneSupported(\" << (void*)this << \", message='\" << message\n                  << \"')\";\n \n   StopPeriodicTimers();\n   load_state_ = kWaitingForSource;\n   current_source_node_ = nullptr;\n \n \n  error_ = MediaError::Create(MediaError::kMediaErrSrcNotSupported, message);\n\n  ForgetResourceSpecificTracks();\n\n  SetNetworkState(kNetworkNoSource);\n\n  UpdateDisplayState();\n\n  ScheduleEvent(EventTypeNames::error);\n\n  ScheduleRejectPlayPromises(kNotSupportedError);\n\n  CloseMediaSource();\n\n  SetShouldDelayLoadEvent(false);\n\n  if (GetLayoutObject())\n    GetLayoutObject()->UpdateFromElement();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"BLINK_MEDIA_LOG << \\\"NoneSupported(\\\" << (void*)this << \\\", message='\\\" << message << \\\"')\\\";\",\n  \"LINE2\": \"error_ = MediaError::Create(MediaError::kMediaErrSrcNotSupported, message);\",\n  \"LINE3\": \"ScheduleEvent(EventTypeNames::error);\",\n  \"LINE4\": \"ScheduleRejectPlayPromises(kNotSupportedError);\",\n  \"LINE5\": \"if (GetLayoutObject()) GetLayoutObject()->UpdateFromElement();\"\n}\n```",
    "truly_vulnerable_lines": "  BLINK_MEDIA_LOG << \"NoneSupported(\" << (void*)this << \", message='\" << message\n                  << \"')\";\n"
  },
  {
    "code": "gfx::Insets ScrollableShelfView::CalculateEdgePadding() const {\n  if (ShouldApplyDisplayCentering())\n    return CalculatePaddingForDisplayCentering();\n \n   const int icons_size = shelf_view_->GetSizeOfAppIcons(\n       shelf_view_->number_of_visible_apps(), false);\n  gfx::Insets padding_insets(\n      /*vertical= */ 0,\n      /*horizontal= */ ShelfConfig::Get()->app_icon_group_margin());\n \n   const int available_size_for_app_icons =\n       (GetShelf()->IsHorizontalAlignment() ? width() : height()) -\n      2 * ShelfConfig::Get()->app_icon_group_margin();\n\n  int gap =\n      layout_strategy_ == kNotShowArrowButtons\n           ? available_size_for_app_icons - icons_size  // shelf centering\n           : CalculateOverflowPadding(available_size_for_app_icons);  // overflow\n \n  padding_insets.set_left(padding_insets.left() + gap / 2);\n  padding_insets.set_right(padding_insets.right() +\n                           (gap % 2 ? gap / 2 + 1 : gap / 2));\n \n   return padding_insets;\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"const int icons_size = shelf_view_->GetSizeOfAppIcons(shelf_view_->number_of_visible_apps(), false);\",\n  \"LINE2\": \"const int available_size_for_app_icons = (GetShelf()->IsHorizontalAlignment() ? width() : height()) - 2 * ShelfConfig::Get()->app_icon_group_margin();\",\n  \"LINE3\": \"int gap = layout_strategy_ == kNotShowArrowButtons ? available_size_for_app_icons - icons_size : CalculateOverflowPadding(available_size_for_app_icons);\",\n  \"LINE4\": \"padding_insets.set_left(padding_insets.left() + gap / 2);\",\n  \"LINE5\": \"padding_insets.set_right(padding_insets.right() + (gap % 2 ? gap / 2 + 1 : gap / 2));\"\n}\n```",
    "truly_vulnerable_lines": "  gfx::Insets padding_insets(\n      /*vertical= */ 0,\n      /*horizontal= */ ShelfConfig::Get()->app_icon_group_margin());\n  padding_insets.set_left(padding_insets.left() + gap / 2);\n  padding_insets.set_right(padding_insets.right() +\n                           (gap % 2 ? gap / 2 + 1 : gap / 2));\n"
  },
  {
    "code": "gfx::Insets ScrollableShelfView::CalculatePaddingForDisplayCentering() const {\n  const int icons_size = shelf_view_->GetSizeOfAppIcons(\n      shelf_view_->number_of_visible_apps(), false);\n  const gfx::Rect display_bounds =\n      screen_util::GetDisplayBoundsWithShelf(GetWidget()->GetNativeWindow());\n  const int display_size_primary = GetShelf()->PrimaryAxisValue(\n      display_bounds.width(), display_bounds.height());\n  const int gap = (display_size_primary - icons_size) / 2;\n \n   const gfx::Rect screen_bounds = GetBoundsInScreen();\n  const int left_padding = gap - GetShelf()->PrimaryAxisValue(\n                                     screen_bounds.x() - display_bounds.x(),\n                                     screen_bounds.y() - display_bounds.y());\n  const int right_padding =\n       gap - GetShelf()->PrimaryAxisValue(\n                 display_bounds.right() - screen_bounds.right(),\n                 display_bounds.bottom() - screen_bounds.bottom());\n \n  return gfx::Insets(0, left_padding, 0, right_padding);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"const int gap = (display_size_primary - icons_size) / 2;\",\n  \"LINE2\": \"const int left_padding = gap - GetShelf()->PrimaryAxisValue(screen_bounds.x() - display_bounds.x(), screen_bounds.y() - display_bounds.y());\",\n  \"LINE3\": \"const int right_padding = gap - GetShelf()->PrimaryAxisValue(display_bounds.right() - screen_bounds.right(), display_bounds.bottom() - screen_bounds.bottom());\"\n}\n```",
    "truly_vulnerable_lines": "  const int left_padding = gap - GetShelf()->PrimaryAxisValue(\n                                     screen_bounds.x() - display_bounds.x(),\n                                     screen_bounds.y() - display_bounds.y());\n  const int right_padding =\n  return gfx::Insets(0, left_padding, 0, right_padding);\n"
  },
  {
    "code": " float ScrollableShelfView::CalculatePageScrollingOffset(bool forward) const {\n  float offset = space_for_icons_ - kArrowButtonGroupWidth -\n                  ShelfConfig::Get()->button_size() - GetAppIconEndPadding();\n   if (layout_strategy_ == kShowRightArrowButton)\n     offset -= (kArrowButtonGroupWidth - GetAppIconEndPadding());\n  DCHECK_GT(offset, 0);\n\n  if (!forward)\n    offset = -offset;\n\n  return offset;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"DCHECK_GT(offset, 0);\",\n  \"LINE2\": \"\",\n  \"LINE3\": \"\",\n  \"LINE4\": \"\",\n  \"LINE5\": \"\"\n}\n```",
    "truly_vulnerable_lines": "  float offset = space_for_icons_ - kArrowButtonGroupWidth -\n"
  },
  {
    "code": "int ScrollableShelfView::CalculateScrollUpperBound() const {\n  if (layout_strategy_ == kNotShowArrowButtons)\n     return 0;\n \n  int available_length = space_for_icons_ - 2 * GetAppIconEndPadding();\n \n   const gfx::Size shelf_preferred_size(\n      shelf_container_view_->GetPreferredSize());\n  const int preferred_length =\n      (GetShelf()->IsHorizontalAlignment() ? shelf_preferred_size.width()\n                                           : shelf_preferred_size.height());\n\n  return std::max(0, preferred_length - available_length);\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"int available_length = space_for_icons_ - 2 * GetAppIconEndPadding();\",\n  \"LINE2\": \"const gfx::Size shelf_preferred_size(shelf_container_view_->GetPreferredSize());\",\n  \"LINE3\": \"const int preferred_length = (GetShelf()->IsHorizontalAlignment() ? shelf_preferred_size.width() : shelf_preferred_size.height());\",\n  \"LINE4\": \"return std::max(0, preferred_length - available_length);\"\n}\n```",
    "truly_vulnerable_lines": "  int available_length = space_for_icons_ - 2 * GetAppIconEndPadding();\n"
  },
  {
    "code": "   explicit RemoveDownloadsTester(TestingProfile* testing_profile)\n      : download_manager_(new content::MockDownloadManager()),\n        chrome_download_manager_delegate_(testing_profile) {\n     content::BrowserContext::SetDownloadManagerForTesting(\n         testing_profile, base::WrapUnique(download_manager_));\n    EXPECT_EQ(download_manager_,\n              content::BrowserContext::GetDownloadManager(testing_profile));\n    EXPECT_CALL(*download_manager_, GetDelegate())\n        .WillOnce(Return(&chrome_download_manager_delegate_));\n     EXPECT_CALL(*download_manager_, Shutdown());\n   }\n",
    "response": "```json\n{\n  \"LINE1\": \"download_manager_(new content::MockDownloadManager())\",\n  \"LINE2\": \"chrome_download_manager_delegate_(testing_profile)\",\n  \"LINE3\": \"content::BrowserContext::SetDownloadManagerForTesting(\",\n  \"LINE4\": \"testing_profile, base::WrapUnique(download_manager_));\"\n}\n```",
    "truly_vulnerable_lines": "      : download_manager_(new content::MockDownloadManager()),\n        chrome_download_manager_delegate_(testing_profile) {\n    EXPECT_EQ(download_manager_,\n              content::BrowserContext::GetDownloadManager(testing_profile));\n    EXPECT_CALL(*download_manager_, GetDelegate())\n        .WillOnce(Return(&chrome_download_manager_delegate_));\n"
  },
  {
    "code": " DownloadCoreServiceImpl::GetDownloadManagerDelegate() {\n   DownloadManager* manager = BrowserContext::GetDownloadManager(profile_);\n  if (download_manager_created_) {\n    DCHECK(static_cast<DownloadManagerDelegate*>(manager_delegate_.get()) ==\n           manager->GetDelegate());\n     return manager_delegate_.get();\n  }\n   download_manager_created_ = true;\n \n  if (!manager_delegate_.get())\n    manager_delegate_.reset(new ChromeDownloadManagerDelegate(profile_));\n\n  manager_delegate_->SetDownloadManager(manager);\n\n#if BUILDFLAG(ENABLE_EXTENSIONS)\n  extension_event_router_.reset(\n      new extensions::ExtensionDownloadsEventRouter(profile_, manager));\n#endif\n\n  if (!profile_->IsOffTheRecord()) {\n    history::HistoryService* history = HistoryServiceFactory::GetForProfile(\n        profile_, ServiceAccessType::EXPLICIT_ACCESS);\n    history->GetNextDownloadId(\n        manager_delegate_->GetDownloadIdReceiverCallback());\n    download_history_.reset(new DownloadHistory(\n        manager, std::unique_ptr<DownloadHistory::HistoryAdapter>(\n                     new DownloadHistory::HistoryAdapter(history))));\n  }\n\n  download_ui_.reset(new DownloadUIController(\n      manager, std::unique_ptr<DownloadUIController::Delegate>()));\n \n   g_browser_process->download_status_updater()->AddManager(manager);\n \n   return manager_delegate_.get();\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (!manager_delegate_.get())\",\n  \"LINE2\": \"extension_event_router_.reset(new extensions::ExtensionDownloadsEventRouter(profile_, manager));\",\n  \"LINE3\": \"history->GetNextDownloadId(manager_delegate_->GetDownloadIdReceiverCallback());\",\n  \"LINE4\": \"download_history_.reset(new DownloadHistory(manager, std::unique_ptr<DownloadHistory::HistoryAdapter>(new DownloadHistory::HistoryAdapter(history))));\",\n  \"LINE5\": \"download_ui_.reset(new DownloadUIController(manager, std::unique_ptr<DownloadUIController::Delegate>()));\"\n}\n```",
    "truly_vulnerable_lines": "  if (download_manager_created_) {\n    DCHECK(static_cast<DownloadManagerDelegate*>(manager_delegate_.get()) ==\n           manager->GetDelegate());\n  }\n"
  },
  {
    "code": "void DownloadCoreServiceImpl::SetDownloadManagerDelegateForTesting(\n    std::unique_ptr<ChromeDownloadManagerDelegate> new_delegate) {\n   manager_delegate_.swap(new_delegate);\n   DownloadManager* dm = BrowserContext::GetDownloadManager(profile_);\n   dm->SetDelegate(manager_delegate_.get());\n  manager_delegate_->SetDownloadManager(dm);\n   if (new_delegate)\n     new_delegate->Shutdown();\n }\n",
    "response": "```json\n{\n  \"LINE4\": \"manager_delegate_->SetDownloadManager(dm);\"\n}\n```",
    "truly_vulnerable_lines": "  manager_delegate_->SetDownloadManager(dm);\n"
  },
  {
    "code": "void DevToolsDownloadManagerDelegate::OnDownloadPathGenerated(\n    uint32_t download_id,\n    const content::DownloadTargetCallback& callback,\n    const base::FilePath& suggested_path) {\n  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);\n \n   callback.Run(suggested_path,\n                content::DownloadItem::TARGET_DISPOSITION_OVERWRITE,\n               download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,\n                suggested_path.AddExtension(FILE_PATH_LITERAL(\".crdownload\")),\n                content::DOWNLOAD_INTERRUPT_REASON_NONE);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"callback.Run(suggested_path,\",\n  \"LINE2\": \"content::DownloadItem::TARGET_DISPOSITION_OVERWRITE,\",\n  \"LINE3\": \"suggested_path.AddExtension(FILE_PATH_LITERAL(\\\".crdownload\\\")),\"\n}\n```",
    "truly_vulnerable_lines": "               download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,\n"
  },
  {
    "code": "void HTMLStyleElement::DidNotifySubtreeInsertionsToDocument() {\n  if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\n      StyleElement::kProcessingFatalError)\n    NotifyLoadedSheetAndAllCriticalSubresources(\n        kErrorOccurredLoadingSubresource);\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\",\n  \"LINE2\": \"StyleElement::kProcessingFatalError)\",\n  \"LINE3\": \"NotifyLoadedSheetAndAllCriticalSubresources(\",\n  \"LINE4\": \"kErrorOccurredLoadingSubresource);\"\n}\n```",
    "truly_vulnerable_lines": "  if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\n      StyleElement::kProcessingFatalError)\n    NotifyLoadedSheetAndAllCriticalSubresources(\n        kErrorOccurredLoadingSubresource);\n}\n"
  },
  {
    "code": " Node::InsertionNotificationRequest HTMLStyleElement::InsertedInto(\n     ContainerNode* insertion_point) {\n   HTMLElement::InsertedInto(insertion_point);\n  return kInsertionShouldCallDidNotifySubtreeInsertions;\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"HTMLElement::InsertedInto(insertion_point);\"\n}\n```",
    "truly_vulnerable_lines": "  return kInsertionShouldCallDidNotifySubtreeInsertions;\n"
  },
  {
    "code": "void SVGStyleElement::DidNotifySubtreeInsertionsToDocument() {\n  if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\n      StyleElement::kProcessingFatalError)\n    NotifyLoadedSheetAndAllCriticalSubresources(\n        kErrorOccurredLoadingSubresource);\n }\n",
    "response": "```json\n{\n  \"LINE1\": \"if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\",\n  \"LINE2\": \"StyleElement::kProcessingFatalError)\",\n  \"LINE3\": \"NotifyLoadedSheetAndAllCriticalSubresources(\",\n  \"LINE4\": \"kErrorOccurredLoadingSubresource);\"\n}\n```",
    "truly_vulnerable_lines": "  if (StyleElement::ProcessStyleSheet(GetDocument(), *this) ==\n      StyleElement::kProcessingFatalError)\n    NotifyLoadedSheetAndAllCriticalSubresources(\n        kErrorOccurredLoadingSubresource);\n"
  },
  {
    "code": " Node::InsertionNotificationRequest SVGStyleElement::InsertedInto(\n     ContainerNode* insertion_point) {\n   SVGElement::InsertedInto(insertion_point);\n  return kInsertionShouldCallDidNotifySubtreeInsertions;\n}\n",
    "response": "```json\n{\n  \"LINE1\": \"SVGElement::InsertedInto(insertion_point);\"\n}\n```",
    "truly_vulnerable_lines": "  return kInsertionShouldCallDidNotifySubtreeInsertions;\n}\n"
  }
]