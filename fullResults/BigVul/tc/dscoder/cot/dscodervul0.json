[
  {
    "code": "PHP_FUNCTION(time_sleep_until)\n{\n\tdouble d_ts, c_ts;\n\tstruct timeval tm;\n\tstruct timespec php_req, php_rem;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"d\", &d_ts) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (gettimeofday((struct timeval *) &tm, NULL) != 0) {\n\t\tRETURN_FALSE;\n\t}\n\n\tc_ts = (double)(d_ts - tm.tv_sec - tm.tv_usec / 1000000.00);\n\tif (c_ts < 0) {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"Sleep until to time is less than current time\");\n\t\tRETURN_FALSE;\n\t}\n\n\tphp_req.tv_sec = (time_t) c_ts;\n\tif (php_req.tv_sec > c_ts) { /* rounding up occurred */\n\t\tphp_req.tv_sec--;\n\t}\n\t/* 1sec = 1000000000 nanoseconds */\n\tphp_req.tv_nsec = (long) ((c_ts - php_req.tv_sec) * 1000000000.00);\n\n\twhile (nanosleep(&php_req, &php_rem)) {\n\t\tif (errno == EINTR) {\n\t\t\tphp_req.tv_sec = php_rem.tv_sec;\n\t\t\tphp_req.tv_nsec = php_rem.tv_nsec;\n\t\t} else {\n\t\t\tRETURN_FALSE;\n\t\t}\n\t}\n\n\tRETURN_TRUE;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void DeviceServiceAction::execute(Solid::Device &device)\n{\n    new DelayedExecutor(m_service, device);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void LayerTreeHost::RegisterElement(ElementId element_id,\n                                    ElementListType list_type,\n                                    Layer* layer) {\n  if (layer->element_id()) {\n    element_layers_map_[layer->element_id()] = layer;\n  }\n\n  mutator_host_->RegisterElement(element_id, list_type);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void NavigationControllerImpl::RendererDidNavigateInPage(\n    const ViewHostMsg_FrameNavigate_Params& params, bool* did_replace_entry) {\n  DCHECK(PageTransitionIsMainFrame(params.transition)) <<\n      \"WebKit should only tell us about in-page navs for the main frame.\";\n  NavigationEntryImpl* existing_entry = GetEntryWithPageID(\n      web_contents_->GetSiteInstance(), params.page_id);\n\n  existing_entry->SetURL(params.url);\n  if (existing_entry->update_virtual_url_with_url())\n    UpdateVirtualURLToURL(existing_entry, params.url);\n\n  *did_replace_entry = true;\n\n  DiscardNonCommittedEntriesInternal();\n\n  last_committed_entry_index_ =\n      GetEntryIndexWithPageID(web_contents_->GetSiteInstance(), params.page_id);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "GpuProcessPolicy::~GpuProcessPolicy() {}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void FileSystemOperation::DidTouchFile(const StatusCallback& callback,\n                                       base::PlatformFileError rv) {\n  callback.Run(rv);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static void sco_conn_ready(struct sco_conn *conn)\n{\n\tstruct sock *parent;\n\tstruct sock *sk = conn->sk;\n\n\tBT_DBG(\"conn %p\", conn);\n\n\tsco_conn_lock(conn);\n\n\tif (sk) {\n\t\tsco_sock_clear_timer(sk);\n\t\tbh_lock_sock(sk);\n\t\tsk->sk_state = BT_CONNECTED;\n\t\tsk->sk_state_change(sk);\n\t\tbh_unlock_sock(sk);\n\t} else {\n\t\tparent = sco_get_sock_listen(conn->src);\n\t\tif (!parent)\n\t\t\tgoto done;\n\n\t\tbh_lock_sock(parent);\n\n\t\tsk = sco_sock_alloc(sock_net(parent), NULL,\n\t\t\t\tBTPROTO_SCO, GFP_ATOMIC);\n\t\tif (!sk) {\n\t\t\tbh_unlock_sock(parent);\n\t\t\tgoto done;\n\t\t}\n\n\t\tsco_sock_init(sk, parent);\n\n\t\tbacpy(&bt_sk(sk)->src, conn->src);\n\t\tbacpy(&bt_sk(sk)->dst, conn->dst);\n\n\t\thci_conn_hold(conn->hcon);\n\t\t__sco_chan_add(conn, sk, parent);\n\n\t\tsk->sk_state = BT_CONNECTED;\n\n\t\t/* Wake up parent */\n\t\tparent->sk_data_ready(parent, 1);\n\n\t\tbh_unlock_sock(parent);\n\t}\n\ndone:\n\tsco_conn_unlock(conn);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "sysfs_resolve_link (const char *sysfs_path,\n                    const char *name)\n{\n  char *full_path;\n  char link_path[PATH_MAX];\n  char resolved_path[PATH_MAX];\n  ssize_t num;\n  gboolean found_it;\n\n  found_it = FALSE;\n\n  full_path = g_build_filename (sysfs_path, name, NULL);\n\n  num = readlink (full_path, link_path, sizeof(link_path) - 1);\n  if (num != -1)\n    {\n      char *absolute_path;\n\n      link_path[num] = '\\0';\n\n      absolute_path = g_build_filename (sysfs_path, link_path, NULL);\n      if (realpath (absolute_path, resolved_path) != NULL)\n        {\n          found_it = TRUE;\n        }\n      g_free (absolute_path);\n    }\n  g_free (full_path);\n\n  if (found_it)\n    return g_strdup (resolved_path);\n  else\n    return NULL;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this"
  },
  {
    "code": "void LocalFrame::MaybeAllowImagePlaceholder(FetchParameters& params) const {\n  if (GetSettings() && GetSettings()->GetFetchImagePlaceholders()) {\n    params.SetAllowImagePlaceholder();\n    return;\n  }\n\n  if (Client() &&\n      ShouldUseClientLoFiForRequest(params.GetResourceRequest(),\n                                    Client()->GetPreviewsStateForFrame())) {\n    params.MutableResourceRequest().SetPreviewsState(\n        params.GetResourceRequest().GetPreviewsState() |\n        WebURLRequest::kClientLoFiOn);\n    params.SetAllowImagePlaceholder();\n  }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "cmsBool CMSEXPORT cmsIT8SetData(cmsHANDLE hIT8, const char* cPatch, const char* cSample, const char *Val)\n{\n    cmsIT8* it8 = (cmsIT8*) hIT8;\n    int iField, iSet;\n    TABLE* t;\n\n    _cmsAssert(hIT8 != NULL);\n\n    t = GetTable(it8);\n\n    iField = LocateSample(it8, cSample);\n\n    if (iField < 0)\n        return FALSE;\n\n    if (t-> nPatches == 0) {\n\n        AllocateDataFormat(it8);\n        AllocateDataSet(it8);\n        CookPointers(it8);\n    }\n\n    if (cmsstrcasecmp(cSample, \"SAMPLE_ID\") == 0) {\n\n        iSet   = LocateEmptyPatch(it8);\n        if (iSet < 0) {\n            return SynError(it8, \"Couldn't add more patches '%s'\\n\", cPatch);\n        }\n\n        iField = t -> SampleID;\n    }\n    else {\n        iSet = LocatePatch(it8, cPatch);\n        if (iSet < 0) {\n            return FALSE;\n        }\n    }\n\n    return SetData(it8, iSet, iField, Val);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void RenderWidgetHostImpl::DragTargetDragEnterWithMetaData(\n    const std::vector<DropData::Metadata>& metadata,\n    const gfx::PointF& client_pt,\n    const gfx::PointF& screen_pt,\n    WebDragOperationsMask operations_allowed,\n    int key_modifiers) {\n  Send(new DragMsg_TargetDragEnter(GetRoutingID(), metadata, client_pt,\n                                   screen_pt, operations_allowed,\n                                   key_modifiers));\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "  Browser* GetAppropriateBrowser() {\n    return browser::FindOrCreateTabbedBrowser(\n        ProfileManager::GetDefaultProfileOrOffTheRecord());\n  }\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int sf_setstate(struct ip_mc_list *pmc)\n{\n\tstruct ip_sf_list *psf, *dpsf;\n\tint mca_xcount = pmc->sfcount[MCAST_EXCLUDE];\n\tint qrv = pmc->interface->mr_qrv;\n\tint new_in, rv;\n\n\trv = 0;\n\tfor (psf=pmc->sources; psf; psf=psf->sf_next) {\n\t\tif (pmc->sfcount[MCAST_EXCLUDE]) {\n\t\t\tnew_in = mca_xcount == psf->sf_count[MCAST_EXCLUDE] &&\n\t\t\t\t!psf->sf_count[MCAST_INCLUDE];\n\t\t} else\n\t\t\tnew_in = psf->sf_count[MCAST_INCLUDE] != 0;\n\t\tif (new_in) {\n\t\t\tif (!psf->sf_oldin) {\n\t\t\t\tstruct ip_sf_list *prev = NULL;\n\n\t\t\t\tfor (dpsf=pmc->tomb; dpsf; dpsf=dpsf->sf_next) {\n\t\t\t\t\tif (dpsf->sf_inaddr == psf->sf_inaddr)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tprev = dpsf;\n\t\t\t\t}\n\t\t\t\tif (dpsf) {\n\t\t\t\t\tif (prev)\n\t\t\t\t\t\tprev->sf_next = dpsf->sf_next;\n\t\t\t\t\telse\n\t\t\t\t\t\tpmc->tomb = dpsf->sf_next;\n\t\t\t\t\tkfree(dpsf);\n\t\t\t\t}\n\t\t\t\tpsf->sf_crcount = qrv;\n\t\t\t\trv++;\n\t\t\t}\n\t\t} else if (psf->sf_oldin) {\n\n\t\t\tpsf->sf_crcount = 0;\n\t\t\t/*\n\t\t\t * add or update \"delete\" records if an active filter\n\t\t\t * is now inactive\n\t\t\t */\n\t\t\tfor (dpsf=pmc->tomb; dpsf; dpsf=dpsf->sf_next)\n\t\t\t\tif (dpsf->sf_inaddr == psf->sf_inaddr)\n\t\t\t\t\tbreak;\n\t\t\tif (!dpsf) {\n\t\t\t\tdpsf = kmalloc(sizeof(*dpsf), GFP_ATOMIC);\n\t\t\t\tif (!dpsf)\n\t\t\t\t\tcontinue;\n\t\t\t\t*dpsf = *psf;\n\t\t\t\t/* pmc->lock held by callers */\n\t\t\t\tdpsf->sf_next = pmc->tomb;\n\t\t\t\tpmc->tomb = dpsf;\n\t\t\t}\n\t\t\tdpsf->sf_crcount = qrv;\n\t\t\trv++;\n\t\t}\n\t}\n\treturn rv;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "AuthBackend::AuthBackend()\n    : QObject(0)\n    , d(new Private)\n{\n\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int lua_apr_touch(lua_State *L)\n{\n    request_rec     *r;\n    const char      *path;\n    apr_status_t    status;\n    apr_time_t      mtime;\n\n    r = ap_lua_check_request_rec(L, 1);\n    luaL_checktype(L, 2, LUA_TSTRING);\n    path = lua_tostring(L, 2);\n    mtime = (apr_time_t)luaL_optnumber(L, 3, (lua_Number)apr_time_now());\n    status = apr_file_mtime_set(path, mtime, r->pool);\n    lua_pushboolean(L, (status == 0));\n    return 1;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void RenderView::logCrossFramePropertyAccess(WebFrame* frame,\n                                             WebFrame* target,\n                                             bool cross_origin,\n                                             const WebString& property_name,\n                                             unsigned long long event_id) {\n  if (cross_origin)\n    cross_origin_access_count_++;\n  else\n    same_origin_access_count_++;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this"
  },
  {
    "code": "bool ResourceDispatcherHostImpl::ShouldServiceRequest(\n    int child_id,\n    const network::ResourceRequest& request_data,\n    const net::HttpRequestHeaders& headers,\n    ResourceRequesterInfo* requester_info,\n    ResourceContext* resource_context) {\n  ChildProcessSecurityPolicyImpl* policy =\n      ChildProcessSecurityPolicyImpl::GetInstance();\n\n  if (!policy->CanRequestURL(child_id, request_data.url)) {\n    VLOG(1) << \"Denied unauthorized request for \"\n            << request_data.url.possibly_invalid_spec();\n    return false;\n  }\n\n  std::string origin_string;\n  bool has_origin =\n      headers.GetHeader(\"Origin\", &origin_string) && origin_string != \"null\";\n  if (has_origin) {\n    GURL origin(origin_string);\n    if (!policy->CanSetAsOriginHeader(child_id, origin)) {\n      VLOG(1) << \"Killed renderer for illegal origin: \" << origin_string;\n      bad_message::ReceivedBadMessage(requester_info->filter(),\n                                      bad_message::RDH_ILLEGAL_ORIGIN);\n      return false;\n    }\n  }\n\n  if (!policy->CanReadRequestBody(child_id,\n                                  requester_info->file_system_context(),\n                                  request_data.request_body)) {\n    NOTREACHED() << \"Denied unauthorized upload\";\n    return false;\n  }\n\n  if (!ValidatePluginChildId(request_data.plugin_child_id)) {\n    NOTREACHED() << \"Invalid request_data.plugin_child_id: \"\n                 << request_data.plugin_child_id << \" (\" << child_id << \", \"\n                 << request_data.render_frame_id << \")\";\n    return false;\n  }\n\n  return true;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void dev_error(struct cgpu_info *dev, enum dev_reason reason)\n{\n\tdev->device_last_not_well = time(NULL);\n\tdev->device_not_well_reason = reason;\n\n\tswitch (reason) {\n\t\tcase REASON_THREAD_FAIL_INIT:\n\t\t\tdev->thread_fail_init_count++;\n\t\t\tbreak;\n\t\tcase REASON_THREAD_ZERO_HASH:\n\t\t\tdev->thread_zero_hash_count++;\n\t\t\tbreak;\n\t\tcase REASON_THREAD_FAIL_QUEUE:\n\t\t\tdev->thread_fail_queue_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_SICK_IDLE_60:\n\t\t\tdev->dev_sick_idle_60_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_DEAD_IDLE_600:\n\t\t\tdev->dev_dead_idle_600_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_NOSTART:\n\t\t\tdev->dev_nostart_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_OVER_HEAT:\n\t\t\tdev->dev_over_heat_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_THERMAL_CUTOFF:\n\t\t\tdev->dev_thermal_cutoff_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_COMMS_ERROR:\n\t\t\tdev->dev_comms_error_count++;\n\t\t\tbreak;\n\t\tcase REASON_DEV_THROTTLE:\n\t\t\tdev->dev_throttle_count++;\n\t\t\tbreak;\n\t}\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No,"
  },
  {
    "code": "static int ack_pkt(git_pkt **out, const char *line, size_t len)\n{\n\tgit_pkt_ack *pkt;\n\tGIT_UNUSED(line);\n\tGIT_UNUSED(len);\n\n\tpkt = git__calloc(1, sizeof(git_pkt_ack));\n\tGITERR_CHECK_ALLOC(pkt);\n\n\tpkt->type = GIT_PKT_ACK;\n\tline += 3;\n\tlen -= 3;\n\n\tif (len >= GIT_OID_HEXSZ) {\n\t\tgit_oid_fromstr(&pkt->oid, line + 1);\n\t\tline += GIT_OID_HEXSZ + 1;\n\t\tlen -= GIT_OID_HEXSZ + 1;\n\t}\n\n\tif (len >= 7) {\n\t\tif (!git__prefixcmp(line + 1, \"continue\"))\n\t\t\tpkt->status = GIT_ACK_CONTINUE;\n\t\tif (!git__prefixcmp(line + 1, \"common\"))\n\t\t\tpkt->status = GIT_ACK_COMMON;\n\t\tif (!git__prefixcmp(line + 1, \"ready\"))\n\t\t\tpkt->status = GIT_ACK_READY;\n\t}\n\n\t*out = (git_pkt *) pkt;\n\n\treturn 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "  void GrantScheme(const std::string& scheme) {\n    scheme_policy_[scheme] = true;\n  }\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "int usb_authorize_device(struct usb_device *usb_dev)\n{\n\tint result = 0, c;\n\n\tusb_lock_device(usb_dev);\n\tif (usb_dev->authorized == 1)\n\t\tgoto out_authorized;\n\n\tresult = usb_autoresume_device(usb_dev);\n\tif (result < 0) {\n\t\tdev_err(&usb_dev->dev,\n\t\t\t\"can't autoresume for authorization: %d\\n\", result);\n\t\tgoto error_autoresume;\n\t}\n\n\tif (usb_dev->wusb) {\n\t\tresult = usb_get_device_descriptor(usb_dev, sizeof(usb_dev->descriptor));\n\t\tif (result < 0) {\n\t\t\tdev_err(&usb_dev->dev, \"can't re-read device descriptor for \"\n\t\t\t\t\"authorization: %d\\n\", result);\n\t\t\tgoto error_device_descriptor;\n\t\t}\n\t}\n\n\tusb_dev->authorized = 1;\n\t/* Choose and set the configuration.  This registers the interfaces\n\t * with the driver core and lets interface drivers bind to them.\n\t */\n\tc = usb_choose_configuration(usb_dev);\n\tif (c >= 0) {\n\t\tresult = usb_set_configuration(usb_dev, c);\n\t\tif (result) {\n\t\t\tdev_err(&usb_dev->dev,\n\t\t\t\t\"can't set config #%d, error %d\\n\", c, result);\n\t\t\t/* This need not be fatal.  The user can try to\n\t\t\t * set other configurations. */\n\t\t}\n\t}\n\tdev_info(&usb_dev->dev, \"authorized to connect\\n\");\n\nerror_device_descriptor:\n\tusb_autosuspend_device(usb_dev);\nerror_autoresume:\nout_authorized:\n\tusb_unlock_device(usb_dev);\t/* complements locktree */\n\treturn result;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static __latent_entropy void run_rebalance_domains(struct softirq_action *h)\n{\n\tstruct rq *this_rq = this_rq();\n\tenum cpu_idle_type idle = this_rq->idle_balance ?\n\t\t\t\t\t\tCPU_IDLE : CPU_NOT_IDLE;\n\n\t/*\n\t * If this CPU has a pending nohz_balance_kick, then do the\n\t * balancing on behalf of the other idle CPUs whose ticks are\n\t * stopped. Do nohz_idle_balance *before* rebalance_domains to\n\t * give the idle CPUs a chance to load balance. Else we may\n\t * load balance only within the local sched_domain hierarchy\n\t * and abort nohz_idle_balance altogether if we pull some load.\n\t */\n\tif (nohz_idle_balance(this_rq, idle))\n\t\treturn;\n\n\t/* normal load balance */\n\tupdate_blocked_averages(this_rq->cpu);\n\trebalance_domains(this_rq, idle);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void GLES2DecoderPassthroughImpl::SetSurface(\n    const scoped_refptr<gl::GLSurface>& surface) {\n  DCHECK(context_->IsCurrent(nullptr));\n  DCHECK(surface_.get());\n  surface_ = surface;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "MagickExport ImageInfo *AcquireImageInfo(void)\n{\n  ImageInfo\n    *image_info;\n\n  image_info=(ImageInfo *) AcquireMagickMemory(sizeof(*image_info));\n  if (image_info == (ImageInfo *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");\n  GetImageInfo(image_info);\n  return(image_info);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void OmniboxViewWin::HandleKeystroke(UINT message,\n                                     TCHAR key,\n                                     UINT repeat_count,\n                                     UINT flags) {\n  ScopedFreeze freeze(this, GetTextObjectModel());\n  OnBeforePossibleChange();\n\n  if (key == ui::VKEY_HOME || key == ui::VKEY_END) {\n    HKL layout = GetKeyboardLayout(0);\n    DefWindowProc(message, key, MAKELPARAM(repeat_count, flags));\n    ActivateKeyboardLayout(layout, KLF_REORDER);\n  } else {\n    DefWindowProc(message, key, MAKELPARAM(repeat_count, flags));\n  }\n\n  const int lang_options = SendMessage(EM_GETLANGOPTIONS, 0, 0);\n  if (lang_options & IMF_AUTOKEYBOARD)\n    SendMessage(EM_SETLANGOPTIONS, 0, lang_options & ~IMF_AUTOKEYBOARD);\n\n  OnAfterPossibleChange();\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "AshWindowTreeHostInitParams ShellInitParamsToAshWindowTreeHostInitParams(\n    const ShellInitParams& shell_init_params) {\n  AshWindowTreeHostInitParams ash_init_params;\n#if defined(OS_WIN)\n  ash_init_params.remote_hwnd = shell_init_params.remote_hwnd;\n#endif\n  return ash_init_params;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No,"
  },
  {
    "code": "static int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            fprintf(stderr, \"Failed to set large pages: %s\\n\",\n                    strerror(errno));\n            fprintf(stderr, \"Will use default page size\\n\");\n        } else {\n            ret = 0;\n        }\n    } else {\n        fprintf(stderr, \"Failed to get supported pagesizes: %s\\n\",\n                strerror(errno));\n        fprintf(stderr, \"Will use default page size\\n\");\n    }\n\n    return ret;\n#else\n    return 0;\n#endif\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void DevToolsUIBindings::FrontendLoaded() {\n  if (frontend_loaded_)\n    return;\n  frontend_loaded_ = true;\n\n  delegate_->OnLoadCompleted();\n\n  AddDevToolsExtensionsToClient();\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "inverseFilteringLevelEmphasis(HANDLE_SBR_LPP_TRANS hLppTrans,/*!< Handle of lpp transposer  */\n                              UCHAR nInvfBands, /*!< Number of bands for inverse filtering */\n                              INVF_MODE *sbr_invf_mode, /*!< Current inverse filtering modes */\n                              INVF_MODE *sbr_invf_mode_prev, /*!< Previous inverse filtering modes */\n                              FIXP_DBL * bwVector            /*!< Resulting filtering levels */\n )\n{\n for(int i = 0; i < nInvfBands; i++) {\n    FIXP_DBL accu;\n    FIXP_DBL bwTmp = mapInvfMode (sbr_invf_mode[i],\n                                  sbr_invf_mode_prev[i],\n                                  hLppTrans->pSettings->whFactors);\n\n if(bwTmp < hLppTrans->bwVectorOld[i]) {\n      accu = fMultDiv2(FL2FXCONST_DBL(0.75f),bwTmp) +\n             fMultDiv2(FL2FXCONST_DBL(0.25f),hLppTrans->bwVectorOld[i]);\n }\n else {\n      accu = fMultDiv2(FL2FXCONST_DBL(0.90625f),bwTmp) +\n             fMultDiv2(FL2FXCONST_DBL(0.09375f),hLppTrans->bwVectorOld[i]);\n }\n\n if (accu <  FL2FXCONST_DBL(0.015625f)>>1)\n      bwVector[i] = FL2FXCONST_DBL(0.0f);\n else\n      bwVector[i] = fixMin(accu<<1,FL2FXCONST_DBL(0.99609375f));\n }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable."
  },
  {
    "code": "static bool check_iov_bounds(struct vrend_resource *res,\n                             const struct vrend_transfer_info *info,\n                             struct iovec *iov, int num_iovs)\n{\n   GLuint send_size;\n   GLuint iovsize = vrend_get_iovec_size(iov, num_iovs);\n   GLuint valid_stride, valid_layer_stride;\n\n   /* validate the send size */\n   valid_stride = util_format_get_stride(res->base.format, info->box->width);\n   if (info->stride) {\n      /* only validate passed in stride for boxes with height */\n      if (info->box->height > 1) {\n         if (info->stride < valid_stride)\n            return false;\n         valid_stride = info->stride;\n      }\n   }\n\n   valid_layer_stride = util_format_get_2d_size(res->base.format, valid_stride,\n                                                info->box->height);\n\n   /* layer stride only makes sense for 3d,cube and arrays */\n   if (info->layer_stride) {\n      if ((res->base.target != PIPE_TEXTURE_3D &&\n           res->base.target != PIPE_TEXTURE_CUBE &&\n           res->base.target != PIPE_TEXTURE_1D_ARRAY &&\n           res->base.target != PIPE_TEXTURE_2D_ARRAY &&\n           res->base.target != PIPE_TEXTURE_CUBE_ARRAY))\n         return false;\n\n      /* only validate passed in layer_stride for boxes with depth */\n      if (info->box->depth > 1) {\n         if (info->layer_stride < valid_layer_stride)\n            return false;\n         valid_layer_stride = info->layer_stride;\n      }\n   }\n\n   send_size = valid_layer_stride * info->box->depth;\n   if (iovsize < info->offset)\n      return false;\n   if (iovsize < send_size)\n      return false;\n   if (iovsize < info->offset + send_size)\n      return false;\n\n   return true;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable."
  },
  {
    "code": "handle_nxt_flow_mod_table_id(struct ofconn *ofconn,\n                             const struct ofp_header *oh)\n{\n    const struct nx_flow_mod_table_id *msg = ofpmsg_body(oh);\n    enum ofputil_protocol cur, next;\n\n    cur = ofconn_get_protocol(ofconn);\n    next = ofputil_protocol_set_tid(cur, msg->set != 0);\n    ofconn_set_protocol(ofconn, next);\n\n    return 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void RenderViewImpl::EnsureMediaStreamImpl() {\n  if (!RenderThreadImpl::current())  // Will be NULL during unit tests.\n    return;\n\n#if defined(ENABLE_WEBRTC)\n  if (!media_stream_dispatcher_)\n    media_stream_dispatcher_ = new MediaStreamDispatcher(this);\n\n  if (!media_stream_impl_) {\n    media_stream_impl_ = new MediaStreamImpl(\n        this,\n        media_stream_dispatcher_,\n        RenderThreadImpl::current()->video_capture_impl_manager(),\n        RenderThreadImpl::current()->GetMediaStreamDependencyFactory());\n  }\n#endif\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "int can_nice(const struct task_struct *p, const int nice)\n{\n\t/* convert nice value [19,-20] to rlimit style value [1,40] */\n\tint nice_rlim = 20 - nice;\n\n\treturn (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||\n\t\tcapable(CAP_SYS_NICE));\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "SYSCALL_DEFINE0(sgetmask)\n{\n\t/* SMP safe */\n\treturn current->blocked.sig[0];\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "int kblockd_schedule_work_on(int cpu, struct work_struct *work)\n{\n\treturn queue_work_on(cpu, kblockd_workqueue, work);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not"
  },
  {
    "code": "void WebPage::touchEventCancel()\n{\n    d->m_pluginMayOpenNewTab = false;\n    if (d->m_page->defersLoading())\n        return;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "_XcursorImageLength (XcursorImage   *image)\n{\n    if (!image)\n        return 0;\n\n    return XCURSOR_IMAGE_HEADER_LEN + (image->width * image->height) * 4;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void DiscardableSharedMemoryManager::OnMemoryStateChange(\n    base::MemoryState state) {\n  base::AutoLock lock(lock_);\n  switch (state) {\n    case base::MemoryState::NORMAL:\n      memory_limit_ = default_memory_limit_;\n      break;\n    case base::MemoryState::THROTTLED:\n      memory_limit_ = 0;\n      break;\n    case base::MemoryState::SUSPENDED:\n    case base::MemoryState::UNKNOWN:\n      NOTREACHED();\n      break;\n  }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool HTMLCanvasElement::ShouldBeDirectComposited() const {\n  return (context_ && context_->IsComposited()) || (!!surface_layer_bridge_);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "  virtual Type GetInfoBarType() {\n    return ERROR_TYPE;\n  }\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static const Quantum *GetVirtualPixelCache(const Image *image,\n  const VirtualPixelMethod virtual_pixel_method,const ssize_t x,const ssize_t y,\n  const size_t columns,const size_t rows,ExceptionInfo *exception)\n{\n  CacheInfo\n    *magick_restrict cache_info;\n\n  const int\n    id = GetOpenMPThreadId();\n\n  const Quantum\n    *magick_restrict p;\n\n  assert(image != (const Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(image->cache != (Cache) NULL);\n  cache_info=(CacheInfo *) image->cache;\n  assert(cache_info->signature == MagickCoreSignature);\n  assert(id < (int) cache_info->number_threads);\n  p=GetVirtualPixelsFromNexus(image,virtual_pixel_method,x,y,columns,rows,\n    cache_info->nexus_info[id],exception);\n  return(p);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool FileManagerBrowserTestBase::GetNeedsZipSupport() const {\n  return false;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int patternalternatespace(i_ctx_t * i_ctx_p, ref *space, ref **r, int *CIESubst)\n{\n    ref tref;\n    int code;\n\n    if (!r_has_type(*r, t_name)) {\n        if (r_is_array(*r)) {\n            if (r_size(*r) > 1) {\n                code = array_get(imemory, space, 1, &tref);\n                if (code < 0)\n                    return code;\n                ref_assign(*r, &tref);\n            } else\n                *r = 0;\n        } else\n            return_error(gs_error_typecheck);\n    } else\n        *r = 0;\n    return 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function"
  },
  {
    "code": "dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,\n    int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)\n{\n\tElf32_Phdr ph32;\n\tElf64_Phdr ph64;\n\tsize_t offset, len;\n\tunsigned char nbuf[BUFSIZ];\n\tssize_t bufsize;\n\toff_t ph_off = off;\n\tint ph_num = num;\n\n\tif (size != xph_sizeof) {\n\t\tif (file_printf(ms, \", corrupted program header size\") == -1)\n\t\t\treturn -1;\n\t\treturn 0;\n\t}\n\n\t/*\n\t * Loop through all the program headers.\n\t */\n\tfor ( ; num; num--) {\n\t\tif (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {\n\t\t\tfile_badread(ms);\n\t\t\treturn -1;\n\t\t}\n\t\toff += size;\n\n\t\tif (fsize != SIZE_UNKNOWN && xph_offset > fsize) {\n\t\t\t/* Perhaps warn here */\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (xph_type != PT_NOTE)\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * This is a PT_NOTE section; loop through all the notes\n\t\t * in the section.\n\t\t */\n\t\tlen = xph_filesz < sizeof(nbuf) ? xph_filesz : sizeof(nbuf);\n\t\tif ((bufsize = pread(fd, nbuf, len, xph_offset)) == -1) {\n\t\t\tfile_badread(ms);\n\t\t\treturn -1;\n\t\t}\n\t\toffset = 0;\n\t\tfor (;;) {\n\t\t\tif (offset >= (size_t)bufsize)\n\t\t\t\tbreak;\n\t\t\toffset = donote(ms, nbuf, offset, (size_t)bufsize,\n\t\t\t    clazz, swap, 4, flags, notecount, fd, ph_off,\n\t\t\t    ph_num, fsize);\n\t\t\tif (offset == 0)\n\t\t\t\tbreak;\n\n\t\t}\n\t}\n\treturn 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable"
  },
  {
    "code": "static void magicmouse_emit_buttons(struct magicmouse_sc *msc, int state)\n{\n\tint last_state = test_bit(BTN_LEFT, msc->input->key) << 0 |\n\t\ttest_bit(BTN_RIGHT, msc->input->key) << 1 |\n\t\ttest_bit(BTN_MIDDLE, msc->input->key) << 2;\n\n\tif (emulate_3button) {\n\t\tint id;\n\n\t\t/* If some button was pressed before, keep it held\n\t\t * down.  Otherwise, if there's exactly one firm\n\t\t * touch, use that to override the mouse's guess.\n\t\t */\n\t\tif (state == 0) {\n\t\t\t/* The button was released. */\n\t\t} else if (last_state != 0) {\n\t\t\tstate = last_state;\n\t\t} else if ((id = magicmouse_firm_touch(msc)) >= 0) {\n\t\t\tint x = msc->touches[id].x;\n\t\t\tif (x < middle_button_start)\n\t\t\t\tstate = 1;\n\t\t\telse if (x > middle_button_stop)\n\t\t\t\tstate = 2;\n\t\t\telse\n\t\t\t\tstate = 4;\n\t\t} /* else: we keep the mouse's guess */\n\n\t\tinput_report_key(msc->input, BTN_MIDDLE, state & 4);\n\t}\n\n\tinput_report_key(msc->input, BTN_LEFT, state & 1);\n\tinput_report_key(msc->input, BTN_RIGHT, state & 2);\n\n\tif (state != last_state)\n\t\tmsc->scroll_accel = SCROLL_ACCEL_DEFAULT;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bus_activation_entry_unref (BusActivationEntry *entry)\n{\n  if (entry == NULL) /* hash table requires this */\n    return;\n\n  _dbus_assert (entry->refcount > 0);\n  entry->refcount--;\n\n  if (entry->refcount > 0)\n    return;\n\n  dbus_free (entry->name);\n  dbus_free (entry->exec);\n  dbus_free (entry->user);\n  dbus_free (entry->filename);\n  dbus_free (entry->systemd_service);\n\n  dbus_free (entry);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void Document::getCSSCanvasContext(const String& type, const String& name, int width, int height, CanvasRenderingContext2DOrWebGLRenderingContext& returnValue)\n{\n    HTMLCanvasElement& element = getCSSCanvasElement(name);\n    element.setSize(IntSize(width, height));\n    element.getContext(type, CanvasContextCreationAttributes(), returnValue);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool TouchEventConverterEvdev::HasTouchscreen() const {\n  return true;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static inline struct sk_buff *handle_bridge(struct sk_buff *skb,\n\t\t\t\t\t    struct packet_type **pt_prev, int *ret,\n\t\t\t\t\t    struct net_device *orig_dev)\n{\n\tstruct net_bridge_port *port;\n\n\tif (skb->pkt_type == PACKET_LOOPBACK ||\n\t    (port = rcu_dereference(skb->dev->br_port)) == NULL)\n\t\treturn skb;\n\n\tif (*pt_prev) {\n\t\t*ret = deliver_skb(skb, *pt_prev, orig_dev);\n\t\t*pt_prev = NULL;\n\t}\n\n\treturn br_handle_frame_hook(port, skb);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool Element::matchesReadWritePseudoClass() const\n{\n    return false;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "send_sig_info(int sig, struct siginfo *info, struct task_struct *p)\n{\n\t/*\n\t * Make sure legacy kernel users don't send in bad values\n\t * (normal paths check this in check_kill_permission).\n\t */\n\tif (!valid_signal(sig))\n\t\treturn -EINVAL;\n\n\treturn do_send_sig_info(sig, info, p, false);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "int xmlrpc_set_options(int type, const char *value)\n{\n\tif (type == XMLRPC_HTTP_HEADER)\n\t{\n\t\tif (!stricmp(value, XMLRPC_ON))\n\t\t{\n\t\t\txmlrpc.httpheader = 1;\n\t\t}\n\t\tif (!stricmp(value, XMLRPC_OFF))\n\t\t{\n\t\t\txmlrpc.httpheader = 0;\n\t\t}\n\t}\n\tif (type == XMLRPC_ENCODE)\n\t{\n\t\tif (value)\n\t\t{\n\t\t\txmlrpc.encode = sstrdup(value);\n\t\t}\n\t}\n\tif (type == XMLRPC_INTTAG)\n\t{\n\t\tif (!stricmp(value, XMLRPC_I4))\n\t\t{\n\t\t\txmlrpc.inttagstart = sstrdup(\"<i4>\");\n\t\t\txmlrpc.inttagend = sstrdup(\"</i4>\");\n\t\t}\n\t\tif (!stricmp(value, XMLRPC_INT))\n\t\t{\n\t\t\txmlrpc.inttagstart = sstrdup(\"<int>\");\n\t\t\txmlrpc.inttagend = sstrdup(\"</int>\");\n\t\t}\n\t}\n\treturn 1;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "v8::Handle<v8::Object> V8TestInterface::wrapSlow(PassRefPtr<TestInterface> impl, v8::Isolate* isolate)\n{\n    v8::Handle<v8::Object> wrapper;\n    V8Proxy* proxy = 0;\n    wrapper = V8DOMWrapper::instantiateV8Object(proxy, &info, impl.get());\n    if (UNLIKELY(wrapper.IsEmpty()))\n        return wrapper;\n\n    v8::Persistent<v8::Object> wrapperHandle = v8::Persistent<v8::Object>::New(wrapper);\n\n    if (!hasDependentLifetime)\n        wrapperHandle.MarkIndependent();\n    V8DOMWrapper::setJSWrapperForActiveDOMObject(impl, wrapperHandle, isolate);\n    return wrapper;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "long unix_inq_len(struct sock *sk)\n{\n\tstruct sk_buff *skb;\n\tlong amount = 0;\n\n\tif (sk->sk_state == TCP_LISTEN)\n\t\treturn -EINVAL;\n\n\tspin_lock(&sk->sk_receive_queue.lock);\n\tif (sk->sk_type == SOCK_STREAM ||\n\t    sk->sk_type == SOCK_SEQPACKET) {\n\t\tskb_queue_walk(&sk->sk_receive_queue, skb)\n\t\t\tamount += skb->len;\n\t} else {\n\t\tskb = skb_peek(&sk->sk_receive_queue);\n\t\tif (skb)\n\t\t\tamount = skb->len;\n\t}\n\tspin_unlock(&sk->sk_receive_queue.lock);\n\n\treturn amount;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void StoragePartitionImpl::InitNetworkContext() {\n  network_context_ = GetContentClient()->browser()->CreateNetworkContext(\n      browser_context_, is_in_memory_, relative_partition_path_);\n  if (!network_context_) {\n    CHECK(url_request_context_);\n\n    DCHECK(!base::FeatureList::IsEnabled(network::features::kNetworkService));\n    DCHECK(!network_context_owner_);\n    network_context_owner_ = std::make_unique<NetworkContextOwner>();\n    base::PostTaskWithTraits(\n        FROM_HERE, {BrowserThread::IO},\n        base::BindOnce(&NetworkContextOwner::Initialize,\n                       base::Unretained(network_context_owner_.get()),\n                       MakeRequest(&network_context_), url_request_context_));\n  }\n  network::mojom::NetworkContextClientPtr client_ptr;\n  network_context_client_binding_.Close();\n  network_context_client_binding_.Bind(mojo::MakeRequest(&client_ptr));\n  network_context_->SetClient(std::move(client_ptr));\n  network_context_.set_connection_error_handler(base::BindOnce(\n      &StoragePartitionImpl::InitNetworkContext, weak_factory_.GetWeakPtr()));\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int process_preds(struct trace_event_call *call,\n\t\t\t const char *filter_string,\n\t\t\t struct event_filter *filter,\n\t\t\t struct filter_parse_error *pe)\n{\n\tstruct prog_entry *prog;\n\tint nr_parens;\n\tint nr_preds;\n\tint index;\n\tint ret;\n\n\tret = calc_stack(filter_string, &nr_parens, &nr_preds, &index);\n\tif (ret < 0) {\n\t\tswitch (ret) {\n\t\tcase MISSING_QUOTE:\n\t\t\tparse_error(pe, FILT_ERR_MISSING_QUOTE, index);\n\t\t\tbreak;\n\t\tcase TOO_MANY_OPEN:\n\t\t\tparse_error(pe, FILT_ERR_TOO_MANY_OPEN, index);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tparse_error(pe, FILT_ERR_TOO_MANY_CLOSE, index);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tif (!nr_preds)\n\t\treturn -EINVAL;\n\n\tprog = predicate_parse(filter_string, nr_parens, nr_preds,\n\t\t\t       parse_pred, call, pe);\n\tif (IS_ERR(prog))\n\t\treturn PTR_ERR(prog);\n\n\trcu_assign_pointer(filter->prog, prog);\n\treturn 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool V8TestObjectPython::hasInstance(v8::Handle<v8::Value> jsValue, v8::Isolate* isolate)\n{\n    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, jsValue);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "status_t MediaPlayer::setListener(const sp<MediaPlayerListener>& listener)\n{\n    ALOGV(\"setListener\");\n Mutex::Autolock _l(mLock);\n    mListener = listener;\n return NO_ERROR;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void Reverb_free(ReverbContext *pContext){\n\n    LVREV_ReturnStatus_en     LvmStatus=LVREV_SUCCESS; /* Function call status */\n    LVREV_MemoryTable_st      MemTab;\n\n /* Free the algorithm memory */\n LvmStatus = LVREV_GetMemoryTable(pContext->hInstance,\n &MemTab,\n                                   LVM_NULL);\n\n    LVM_ERROR_CHECK(LvmStatus, \"LVM_GetMemoryTable\", \"Reverb_free\")\n\n for (int i=0; i<LVM_NR_MEMORY_REGIONS; i++){\n if (MemTab.Region[i].Size != 0){\n if (MemTab.Region[i].pBaseAddress != NULL){\n                ALOGV(\"\\tfree() - START freeing %\" PRIu32 \" bytes for region %u at %p\\n\",\n MemTab.Region[i].Size, i, MemTab.Region[i].pBaseAddress);\n\n                free(MemTab.Region[i].pBaseAddress);\n\n                ALOGV(\"\\tfree() - END   freeing %\" PRIu32 \" bytes for region %u at %p\\n\",\n MemTab.Region[i].Size, i, MemTab.Region[i].pBaseAddress);\n }else{\n                ALOGV(\"\\tLVM_ERROR : free() - trying to free with NULL pointer %\" PRIu32 \" bytes \"\n \"for region %u at %p ERROR\\n\",\n MemTab.Region[i].Size, i, MemTab.Region[i].pBaseAddress);\n }\n }\n }\n} /* end Reverb_free */\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int __init ext4_init_fs(void)\n{\n\tint i, err;\n\n\text4_check_flag_values();\n\n\tfor (i = 0; i < EXT4_WQ_HASH_SZ; i++) {\n\t\tmutex_init(&ext4__aio_mutex[i]);\n\t\tinit_waitqueue_head(&ext4__ioend_wq[i]);\n\t}\n\n\terr = ext4_init_pageio();\n\tif (err)\n\t\treturn err;\n\terr = ext4_init_system_zone();\n\tif (err)\n\t\tgoto out6;\n\text4_kset = kset_create_and_add(\"ext4\", NULL, fs_kobj);\n\tif (!ext4_kset)\n\t\tgoto out5;\n\text4_proc_root = proc_mkdir(\"fs/ext4\", NULL);\n\n\terr = ext4_init_feat_adverts();\n\tif (err)\n\t\tgoto out4;\n\n\terr = ext4_init_mballoc();\n\tif (err)\n\t\tgoto out3;\n\n\terr = ext4_init_xattr();\n\tif (err)\n\t\tgoto out2;\n\terr = init_inodecache();\n\tif (err)\n\t\tgoto out1;\n\tregister_as_ext3();\n\tregister_as_ext2();\n\terr = register_filesystem(&ext4_fs_type);\n\tif (err)\n\t\tgoto out;\n\n\text4_li_info = NULL;\n\tmutex_init(&ext4_li_mtx);\n\treturn 0;\nout:\n\tunregister_as_ext2();\n\tunregister_as_ext3();\n\tdestroy_inodecache();\nout1:\n\text4_exit_xattr();\nout2:\n\text4_exit_mballoc();\nout3:\n\text4_exit_feat_adverts();\nout4:\n\tif (ext4_proc_root)\n\t\tremove_proc_entry(\"fs/ext4\", NULL);\n\tkset_unregister(ext4_kset);\nout5:\n\text4_exit_system_zone();\nout6:\n\text4_exit_pageio();\n\treturn err;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is"
  },
  {
    "code": "static void btif_dm_ble_key_nc_req_evt(tBTA_DM_SP_KEY_NOTIF *p_notif_req)\n{\n /* TODO implement key notification for numeric comparison */\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n\n /* Remote name update */\n    btif_update_remote_properties(p_notif_req->bd_addr , p_notif_req->bd_name,\n                                          NULL, BT_DEVICE_TYPE_BLE);\n\n bt_bdaddr_t bd_addr;\n    bdcpy(bd_addr.address, p_notif_req->bd_addr);\n\n bt_bdname_t bd_name;\n    memcpy(bd_name.name, p_notif_req->bd_name, BD_NAME_LEN);\n\n    bond_state_changed(BT_STATUS_SUCCESS, &bd_addr, BT_BOND_STATE_BONDING);\n    pairing_cb.is_ssp = FALSE;\n    pairing_cb.is_le_only = TRUE;\n    pairing_cb.is_le_nc = TRUE;\n\n    HAL_CBACK(bt_hal_cbacks, ssp_request_cb, &bd_addr, &bd_name,\n              COD_UNCLASSIFIED, BT_SSP_VARIANT_PASSKEY_CONFIRMATION,\n              p_notif_req->passkey);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static void hub_tt_work(struct work_struct *work)\n{\n\tstruct usb_hub\t\t*hub =\n\t\tcontainer_of(work, struct usb_hub, tt.clear_work);\n\tunsigned long\t\tflags;\n\n\tspin_lock_irqsave(&hub->tt.lock, flags);\n\twhile (!list_empty(&hub->tt.clear_list)) {\n\t\tstruct list_head\t*next;\n\t\tstruct usb_tt_clear\t*clear;\n\t\tstruct usb_device\t*hdev = hub->hdev;\n\t\tconst struct hc_driver\t*drv;\n\t\tint\t\t\tstatus;\n\n\t\tnext = hub->tt.clear_list.next;\n\t\tclear = list_entry(next, struct usb_tt_clear, clear_list);\n\t\tlist_del(&clear->clear_list);\n\n\t\t/* drop lock so HCD can concurrently report other TT errors */\n\t\tspin_unlock_irqrestore(&hub->tt.lock, flags);\n\t\tstatus = hub_clear_tt_buffer(hdev, clear->devinfo, clear->tt);\n\t\tif (status && status != -ENODEV)\n\t\t\tdev_err(&hdev->dev,\n\t\t\t\t\"clear tt %d (%04x) error %d\\n\",\n\t\t\t\tclear->tt, clear->devinfo, status);\n\n\t\t/* Tell the HCD, even if the operation failed */\n\t\tdrv = clear->hcd->driver;\n\t\tif (drv->clear_tt_buffer_complete)\n\t\t\t(drv->clear_tt_buffer_complete)(clear->hcd, clear->ep);\n\n\t\tkfree(clear);\n\t\tspin_lock_irqsave(&hub->tt.lock, flags);\n\t}\n\tspin_unlock_irqrestore(&hub->tt.lock, flags);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static uint32_t fdctrl_read_dir(FDCtrl *fdctrl)\n{\n    uint32_t retval = 0;\n\n    if (fdctrl_media_changed(get_cur_drv(fdctrl))) {\n        retval |= FD_DIR_DSKCHG;\n    }\n    if (retval != 0) {\n        FLOPPY_DPRINTF(\"Floppy digital input register: 0x%02x\\n\", retval);\n    }\n\n    return retval;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void PermissionsData::SetDefaultPolicyHostRestrictions(\n    const URLPatternSet& default_runtime_blocked_hosts,\n    const URLPatternSet& default_runtime_allowed_hosts) {\n  default_runtime_policy.Get().blocked_hosts = default_runtime_blocked_hosts;\n  default_runtime_policy.Get().allowed_hosts = default_runtime_allowed_hosts;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "AudioMixerAlsa::AudioMixerAlsa()\n    : min_volume_db_(kDefaultMinVolumeDb),\n      max_volume_db_(kDefaultMaxVolumeDb),\n      volume_db_(kDefaultVolumeDb),\n      is_muted_(false),\n      apply_is_pending_(true),\n      alsa_mixer_(NULL),\n      pcm_element_(NULL),\n      prefs_(NULL),\n      disconnected_event_(true, false),\n      num_connection_attempts_(0) {\n}\n",
    "response": "\nNo, this function is not vulnerable.# CWE type it involves is CWE-362. The vulnerable line of code is ```    : min_volume_db_(kDefaultMinVolumeDb),\n      max_volume_db_(kDefaultMaxVolumeDb),\n      volume_db_(kDefaultVolumeDb),\n      is_muted_(false),\n      apply_is_pending_(true),\n      alsa_mixer_(NULL),\n      pcm_element_(NULL),\n      prefs_(NULL),\n      disconnected_event_(true, false),\n      num_connection_attempts_(0) {\n}\n```# CWE type it involves is CWE-362. The vulnerable line of code is ```    : min_volume_db_(kDefaultMinVolumeDb),\n      max_volume_db_(kDefaultMaxVolumeDb),\n      volume_db_(kDefaultVolumeDb),\n      is_muted_(false),\n      apply_is_pending_(true),\n      alsa_mixer_(NULL),\n      pcm_element_(NULL),\n      prefs_(NULL),\n      disconnected_event_(true, false),\n      num_connection_attempts_(0) {\n}\n```# CWE type it involves is CWE-362. The vulnerable line of code is ```    : min_volume_db_(kDefaultMinVolumeDb),\n      max_volume_db_(kDefaultMaxVolumeDb),\n      volume_db_(kDefaultVolumeDb),\n      is_muted_(false),\n      apply_is_pending_(true),\n      alsa_mixer_(NULL),\n      pcm_element_(NULL),\n      prefs_(NULL),\n      disconnected_event_(true, false),\n      num_connection_attempts_(0) {\n}\n```# CWE type it involves is CWE-362. The vulnerable line of code is ```    : min_volume_db_(kDefaultMinVolumeDb),\n      max_volume_db_(kDefaultMaxVolumeDb),\n      volume_db_(kDefaultVolumeDb),\n      is_muted_(false),\n      apply_is_pending_(true),\n      alsa_mixer_(NULL),\n      pcm_element"
  },
  {
    "code": "static int __vsock_core_init(void)\n{\n\tint err;\n\n\tvsock_init_tables();\n\n\tvsock_device.minor = MISC_DYNAMIC_MINOR;\n\terr = misc_register(&vsock_device);\n\tif (err) {\n\t\tpr_err(\"Failed to register misc device\\n\");\n\t\treturn -ENOENT;\n\t}\n\n\terr = proto_register(&vsock_proto, 1);\t/* we want our slab */\n\tif (err) {\n\t\tpr_err(\"Cannot register vsock protocol\\n\");\n\t\tgoto err_misc_deregister;\n\t}\n\n\terr = sock_register(&vsock_family_ops);\n\tif (err) {\n\t\tpr_err(\"could not register af_vsock (%d) address family: %d\\n\",\n\t\t       AF_VSOCK, err);\n\t\tgoto err_unregister_proto;\n\t}\n\n\treturn 0;\n\nerr_unregister_proto:\n\tproto_unregister(&vsock_proto);\nerr_misc_deregister:\n\tmisc_deregister(&vsock_device);\n\treturn err;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool InspectorOverlay::handleTouchEvent(const PlatformTouchEvent& event)\n{\n    if (isEmpty())\n        return false;\n\n    return overlayPage()->mainFrame()->eventHandler().handleTouchEvent(event);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void Browser::FocusChromeOSStatus() {\n  UserMetrics::RecordAction(UserMetricsAction(\"FocusChromeOSStatus\"), profile_);\n  window_->FocusChromeOSStatus();\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "compile_length_string_node(Node* node, regex_t* reg)\n{\n  int rlen, r, len, prev_len, slen, ambig;\n  UChar *p, *prev;\n  StrNode* sn;\n  OnigEncoding enc = reg->enc;\n\n  sn = STR_(node);\n  if (sn->end <= sn->s)\n    return 0;\n\n  ambig = NODE_STRING_IS_AMBIG(node);\n\n  p = prev = sn->s;\n  prev_len = enclen(enc, p);\n  p += prev_len;\n  slen = 1;\n  rlen = 0;\n\n  for (; p < sn->end; ) {\n    len = enclen(enc, p);\n    if (len == prev_len) {\n      slen++;\n    }\n    else {\n      r = add_compile_string_length(prev, prev_len, slen, reg, ambig);\n      rlen += r;\n      prev = p;\n      slen = 1;\n      prev_len = len;\n    }\n    p += len;\n  }\n\n  r = add_compile_string_length(prev, prev_len, slen, reg, ambig);\n  rlen += r;\n  return rlen;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "NTSTATUS TCReadDevice (PDEVICE_OBJECT deviceObject, PVOID buffer, LARGE_INTEGER offset, ULONG length)\n{\n\treturn TCReadWriteDevice (FALSE, deviceObject, buffer, offset, length);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "views::GridLayout* ExtensionInstallDialogView::CreateLayout(\n    int left_column_width,\n    int column_set_id) {\n  container_ = new views::View();\n  views::GridLayout* layout = new views::GridLayout(container_);\n  layout->SetInsets(0, views::kButtonHEdgeMarginNew, views::kPanelVertMargin,\n                    0);\n  container_->SetLayoutManager(layout);\n  AddChildView(container_);\n\n  views::ColumnSet* column_set = layout->AddColumnSet(column_set_id);\n  column_set->AddColumn(views::GridLayout::LEADING, views::GridLayout::LEADING,\n                        0,  // no resizing\n                        views::GridLayout::USE_PREF,\n                        0,  // no fixed width\n                        left_column_width);\n  column_set->AddPaddingColumn(0, views::kPanelHorizMargin);\n  column_set->AddColumn(views::GridLayout::TRAILING, views::GridLayout::LEADING,\n                        0,  // no resizing\n                        views::GridLayout::USE_PREF,\n                        0,  // no fixed width\n                        kIconSize);\n  column_set->AddPaddingColumn(0, views::kButtonHEdgeMarginNew);\n\n  layout->StartRow(0, column_set_id);\n  views::Label* title =\n      new views::Label(prompt_->GetDialogTitle(),\n                       ui::ResourceBundle::GetSharedInstance().GetFontList(\n                           ui::ResourceBundle::MediumFont));\n  title->SetMultiLine(true);\n  title->SetHorizontalAlignment(gfx::ALIGN_LEFT);\n  title->SizeToFit(left_column_width);\n  layout->AddView(title);\n\n  const gfx::ImageSkia* image = prompt_->icon().ToImageSkia();\n  gfx::Size size(image->width(), image->height());\n  if (size.width() > kIconSize || size.height() > kIconSize)\n    size = gfx::Size(kIconSize, kIconSize);\n  views::ImageView* icon = new views::ImageView();\n  icon->SetImageSize(size);\n  icon->SetImage(*image);\n\n  int icon_row_span = 1;  // Always span the title.\n  if (prompt_->has_webstore_data()) {\n    icon_row_span += 3;\n  } else {\n    icon_row_span += 1;\n  }\n  layout->AddView(icon, 1, icon_row_span);\n\n  return layout;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void BpMemoryHeap::assertReallyMapped() const\n{\n if (mHeapId == -1) {\n\n\n Parcel data, reply;\n        data.writeInterfaceToken(IMemoryHeap::getInterfaceDescriptor());\n status_t err = remote()->transact(HEAP_ID, data, &reply);\n int parcel_fd = reply.readFileDescriptor();\n ssize_t size = reply.readInt32();\n uint32_t flags = reply.readInt32();\n uint32_t offset = reply.readInt32();\n\n        ALOGE_IF(err, \"binder=%p transaction failed fd=%d, size=%zd, err=%d (%s)\",\n                asBinder().get(), parcel_fd, size, err, strerror(-err));\n\n int fd = dup( parcel_fd );\n        ALOGE_IF(fd==-1, \"cannot dup fd=%d, size=%zd, err=%d (%s)\",\n                parcel_fd, size, err, strerror(errno));\n\n int access = PROT_READ;\n if (!(flags & READ_ONLY)) {\n            access |= PROT_WRITE;\n }\n\n Mutex::Autolock _l(mLock);\n if (mHeapId == -1) {\n            mRealHeap = true;\n            mBase = mmap(0, size, access, MAP_SHARED, fd, offset);\n if (mBase == MAP_FAILED) {\n                ALOGE(\"cannot map BpMemoryHeap (binder=%p), size=%zd, fd=%d (%s)\",\n                        asBinder().get(), size, fd, strerror(errno));\n                close(fd);\n } else {\n                mSize = size;\n                mFlags = flags;\n                mOffset = offset;\n                android_atomic_write(fd, &mHeapId);\n }\n }\n }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool OSExchangeDataProviderAura::GetFilenames(\n    std::vector<OSExchangeData::FileInfo>* filenames) const {\n  if ((formats_ & OSExchangeData::FILE_NAME) == 0)\n    return false;\n  *filenames = filenames_;\n  return true;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this"
  },
  {
    "code": "int sc_file_add_acl_entry(sc_file_t *file, unsigned int operation,\n                          unsigned int method, unsigned long key_ref)\n{\n\tsc_acl_entry_t *p, *_new;\n\n\tif (file == NULL || operation >= SC_MAX_AC_OPS) {\n\t\treturn SC_ERROR_INVALID_ARGUMENTS;\n\t}\n\n\tswitch (method) {\n\tcase SC_AC_NEVER:\n\t\tsc_file_clear_acl_entries(file, operation);\n\t\tfile->acl[operation] = (sc_acl_entry_t *) 1;\n\t\treturn SC_SUCCESS;\n\tcase SC_AC_NONE:\n\t\tsc_file_clear_acl_entries(file, operation);\n\t\tfile->acl[operation] = (sc_acl_entry_t *) 2;\n\t\treturn SC_SUCCESS;\n\tcase SC_AC_UNKNOWN:\n\t\tsc_file_clear_acl_entries(file, operation);\n\t\tfile->acl[operation] = (sc_acl_entry_t *) 3;\n\t\treturn SC_SUCCESS;\n\tdefault:\n\t\t/* NONE and UNKNOWN get zapped when a new AC is added.\n\t\t * If the ACL is NEVER, additional entries will be\n\t\t * dropped silently. */\n\t\tif (file->acl[operation] == (sc_acl_entry_t *) 1)\n\t\t\treturn SC_SUCCESS;\n\t\tif (file->acl[operation] == (sc_acl_entry_t *) 2\n\t\t || file->acl[operation] == (sc_acl_entry_t *) 3)\n\t\t\tfile->acl[operation] = NULL;\n\t}\n\n\t/* If the entry is already present (e.g. due to the mapping)\n\t * of the card's AC with OpenSC's), don't add it again. */\n\tfor (p = file->acl[operation]; p != NULL; p = p->next) {\n\t\tif ((p->method == method) && (p->key_ref == key_ref))\n\t\t\treturn SC_SUCCESS;\n\t}\n\n\t_new = malloc(sizeof(sc_acl_entry_t));\n\tif (_new == NULL)\n\t\treturn SC_ERROR_OUT_OF_MEMORY;\n\t_new->method = method;\n\t_new->key_ref = key_ref;\n\t_new->next = NULL;\n\n\tp = file->acl[operation];\n\tif (p == NULL) {\n\t\tfile->acl[operation] = _new;\n\t\treturn SC_SUCCESS;\n\t}\n\twhile (p->next != NULL)\n\t\tp = p->next;\n\tp->next = _new;\n\n\treturn SC_SUCCESS;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void WebFrameLoaderClient::didCreateIsolatedScriptContext() {\n  WebViewImpl* webview = webframe_->GetWebViewImpl();\n  WebViewDelegate* d = webview->delegate();\n  if (d)\n    d->DidCreateIsolatedScriptContext(webframe_);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "PHP_METHOD(domdocument, registerNodeClass)\n{\n\tzval *id;\n\txmlDoc *docp;\n\tchar *baseclass = NULL, *extendedclass = NULL;\n\tint baseclass_len = 0, extendedclass_len = 0;\n\tzend_class_entry *basece = NULL, *ce = NULL;\n\tdom_object *intern;\n\n\tif (zend_parse_method_parameters(ZEND_NUM_ARGS() TSRMLS_CC, getThis(), \"Oss!\", &id, dom_document_class_entry, &baseclass, &baseclass_len, &extendedclass, &extendedclass_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (baseclass_len) {\n\t\tzend_class_entry **pce;\n\t\tif (zend_lookup_class(baseclass, baseclass_len, &pce TSRMLS_CC) == FAILURE) {\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"Class %s does not exist\", baseclass);\n\t\t\treturn;\n\t\t}\n\t\tbasece = *pce;\n\t}\n\n\tif (basece == NULL || ! instanceof_function(basece, dom_node_class_entry TSRMLS_CC)) {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"Class %s is not derived from DOMNode.\", baseclass);\n\t\treturn;\n\t}\n\n\tif (extendedclass_len) {\n\t\tzend_class_entry **pce;\n\t\tif (zend_lookup_class(extendedclass, extendedclass_len, &pce TSRMLS_CC) == FAILURE) {\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"Class %s does not exist\", extendedclass);\n\t\t}\n\t\tce = *pce;\n\t}\n\n\tif (ce == NULL || instanceof_function(ce, basece TSRMLS_CC)) {\n\n\t\tDOM_GET_OBJ(docp, id, xmlDocPtr, intern);\n\n\t\tif (dom_set_doc_classmap(intern->document, basece, ce TSRMLS_CC) == FAILURE) {\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"Class %s could not be registered.\", extendedclass);\n\t\t}\n\t\tRETURN_TRUE;\n\t} else {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"Class %s is not derived from %s.\", extendedclass, baseclass);\n\t}\n\n\tRETURN_FALSE;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "zend_op_array *compile_filename(int type, zval *filename TSRMLS_DC)\n{\n\tzend_file_handle file_handle;\n\tzval tmp;\n\tzend_op_array *retval;\n\tchar *opened_path = NULL;\n\n\tif (filename->type != IS_STRING) {\n\t\ttmp = *filename;\n\t\tzval_copy_ctor(&tmp);\n\t\tconvert_to_string(&tmp);\n\t\tfilename = &tmp;\n\t}\n\tfile_handle.filename = filename->value.str.val;\n\tfile_handle.free_filename = 0;\n\tfile_handle.type = ZEND_HANDLE_FILENAME;\n\tfile_handle.opened_path = NULL;\n\tfile_handle.handle.fp = NULL;\n\n\tretval = zend_compile_file(&file_handle, type TSRMLS_CC);\n\tif (retval && file_handle.handle.stream.handle) {\n\t\tint dummy = 1;\n\n\t\tif (!file_handle.opened_path) {\n\t\t\tfile_handle.opened_path = opened_path = estrndup(filename->value.str.val, filename->value.str.len);\n\t\t}\n\n\t\tzend_hash_add(&EG(included_files), file_handle.opened_path, strlen(file_handle.opened_path)+1, (void *)&dummy, sizeof(int), NULL);\n\n\t\tif (opened_path) {\n\t\t\tefree(opened_path);\n\t\t}\n\t}\n\tzend_destroy_file_handle(&file_handle TSRMLS_CC);\n\n\tif (filename==&tmp) {\n\t\tzval_dtor(&tmp);\n\t}\n\treturn retval;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable."
  },
  {
    "code": "void Browser::NewTab() {\n  UserMetrics::RecordAction(UserMetricsAction(\"NewTab\"), profile_);\n\n  if (type() == TYPE_NORMAL) {\n    AddBlankTab(true);\n  } else {\n    Browser* b = GetOrCreateTabbedBrowser(profile_);\n    b->AddBlankTab(true);\n    b->window()->Show();\n    b->GetSelectedTabContentsWrapper()->view()->RestoreFocus();\n  }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "AutoFillManager::AutoFillManager(TabContents* tab_contents)\n    : tab_contents_(tab_contents),\n      personal_data_(NULL),\n      download_manager_(tab_contents_->profile()),\n      disable_download_manager_requests_(false) {\n  DCHECK(tab_contents);\n\n  personal_data_ =\n      tab_contents_->profile()->GetOriginalProfile()->GetPersonalDataManager();\n  download_manager_.SetObserver(this);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "String Document::referrer() const\n{\n    if (loader())\n        return loader()->request().httpReferrer();\n    return String();\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "jas_stream_t *jpc_streamlist_get(jpc_streamlist_t *streamlist, int streamno)\n{\n\tassert(streamno < streamlist->numstreams);\n\treturn streamlist->streams[streamno];\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "bool ShouldRetryWithoutAltSvcOnQuicErrors(\n    const VariationParameters& quic_trial_params) {\n  return !base::LowerCaseEqualsASCII(\n      GetVariationParam(quic_trial_params,\n                        \"retry_without_alt_svc_on_quic_errors\"),\n      \"false\");\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int pva_read_packet(AVFormatContext *s, AVPacket *pkt) {\n    AVIOContext *pb = s->pb;\n    int64_t pva_pts;\n    int ret, length, streamid;\n\n    if (read_part_of_packet(s, &pva_pts, &length, &streamid, 1) < 0 ||\n       (ret = av_get_packet(pb, pkt, length)) <= 0)\n        return AVERROR(EIO);\n\n    pkt->stream_index = streamid - 1;\n    pkt->pts = pva_pts;\n\n    return ret;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "views::View* FindFirstOrLastFocusableChild(views::View* root,\n                                           bool find_last_child) {\n  views::FocusSearch search(root, find_last_child /*cycle*/,\n                            false /*accessibility_mode*/);\n  views::FocusTraversable* dummy_focus_traversable;\n  views::View* dummy_focus_traversable_view;\n  return search.FindNextFocusableView(\n      root,\n      find_last_child ? views::FocusSearch::SearchDirection::kBackwards\n                      : views::FocusSearch::SearchDirection::kForwards,\n      views::FocusSearch::TraversalDirection::kDown,\n      views::FocusSearch::StartingViewPolicy::kSkipStartingView,\n      views::FocusSearch::AnchoredDialogPolicy::kCanGoIntoAnchoredDialog,\n      &dummy_focus_traversable, &dummy_focus_traversable_view);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is"
  },
  {
    "code": "void tq_freeze(struct thread_q *tq)\n{\n\ttq_freezethaw(tq, true);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "status_t Camera2Client::cancelAutoFocus() {\n    ATRACE_CALL();\n Mutex::Autolock icl(mBinderSerializationLock);\n    ALOGV(\"%s: Camera %d\", __FUNCTION__, mCameraId);\n status_t res;\n if ( (res = checkPid(__FUNCTION__) ) != OK) return res;\n\n int triggerId;\n {\n SharedParameters::Lock l(mParameters);\n if (l.mParameters.focusMode == Parameters::FOCUS_MODE_FIXED ||\n                l.mParameters.focusMode == Parameters::FOCUS_MODE_INFINITY) {\n return OK;\n }\n\n if (l.mParameters.afTriggerCounter == l.mParameters.currentAfTriggerId) {\n            ATRACE_ASYNC_END(kAutofocusLabel, l.mParameters.currentAfTriggerId);\n }\n\n        triggerId = ++l.mParameters.afTriggerCounter;\n\n if (l.mParameters.shadowFocusMode != Parameters::FOCUS_MODE_INVALID) {\n            ALOGV(\"%s: Quirk: Restoring focus mode to %d\", __FUNCTION__,\n                    l.mParameters.shadowFocusMode);\n            l.mParameters.focusMode = l.mParameters.shadowFocusMode;\n            l.mParameters.shadowFocusMode = Parameters::FOCUS_MODE_INVALID;\n            updateRequests(l.mParameters);\n\n return OK;\n }\n }\n    syncWithDevice();\n\n    mDevice->triggerCancelAutofocus(triggerId);\n\n return OK;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not"
  },
  {
    "code": "PHP_FUNCTION(imagefilter)\n{\n\tzval *tmp;\n\n\ttypedef void (*image_filter)(INTERNAL_FUNCTION_PARAMETERS);\n\tlong filtertype;\n\timage_filter filters[] =\n\t{\n\t\tphp_image_filter_negate ,\n\t\tphp_image_filter_grayscale,\n\t\tphp_image_filter_brightness,\n\t\tphp_image_filter_contrast,\n\t\tphp_image_filter_colorize,\n\t\tphp_image_filter_edgedetect,\n\t\tphp_image_filter_emboss,\n\t\tphp_image_filter_gaussian_blur,\n\t\tphp_image_filter_selective_blur,\n\t\tphp_image_filter_mean_removal,\n\t\tphp_image_filter_smooth,\n\t\tphp_image_filter_pixelate\n\t};\n\n\tif (ZEND_NUM_ARGS() < 2 || ZEND_NUM_ARGS() > IMAGE_FILTER_MAX_ARGS) {\n\t\tWRONG_PARAM_COUNT;\n\t} else if (zend_parse_parameters(2 TSRMLS_CC, \"rl\", &tmp, &filtertype) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (filtertype >= 0 && filtertype <= IMAGE_FILTER_MAX) {\n\t\tfilters[filtertype](INTERNAL_FUNCTION_PARAM_PASSTHRU);\n\t}\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static void kbd_leds(void *opaque, int ledstate)\n{\n    VncState *vs = opaque;\n    int caps, num, scr;\n    bool has_changed = (ledstate != current_led_state(vs));\n\n    trace_vnc_key_guest_leds((ledstate & QEMU_CAPS_LOCK_LED),\n                             (ledstate & QEMU_NUM_LOCK_LED),\n                             (ledstate & QEMU_SCROLL_LOCK_LED));\n\n    caps = ledstate & QEMU_CAPS_LOCK_LED ? 1 : 0;\n    num  = ledstate & QEMU_NUM_LOCK_LED  ? 1 : 0;\n    scr  = ledstate & QEMU_SCROLL_LOCK_LED ? 1 : 0;\n\n    if (vs->modifiers_state[0x3a] != caps) {\n        vs->modifiers_state[0x3a] = caps;\n    }\n    if (vs->modifiers_state[0x45] != num) {\n        vs->modifiers_state[0x45] = num;\n    }\n    if (vs->modifiers_state[0x46] != scr) {\n        vs->modifiers_state[0x46] = scr;\n    }\n\n    /* Sending the current led state message to the client */\n    if (has_changed) {\n        vnc_led_state_change(vs);\n    }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "std::string GetWifiSSID() {\n  NOTIMPLEMENTED();\n  return std::string();\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                STATS_LOCK();\n                stats.malloc_fails++;\n                STATS_UNLOCK();\n                if (settings.verbose > 0) {\n                    fprintf(stderr, \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_of_memory(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = read(c->sfd, c->rbuf + c->rbytes, avail);\n        if (res > 0) {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.bytes_read += res;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": " BlockEntry::Kind BlockGroup::GetKind() const { return kBlockGroup; }\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "struct tm* localtime64_override(const time_t* timep) {\n  if (g_am_zygote_or_renderer) {\n    static struct tm time_struct;\n    static char timezone_string[64];\n    ProxyLocaltimeCallToBrowser(*timep, &time_struct, timezone_string,\n                                sizeof(timezone_string));\n    return &time_struct;\n  }\n\n  CHECK_EQ(0, pthread_once(&g_libc_localtime_funcs_guard,\n                           InitLibcLocaltimeFunctions));\n  struct tm* res = g_libc_localtime64(timep);\n#if defined(MEMORY_SANITIZER)\n  if (res) __msan_unpoison(res, sizeof(*res));\n  if (res->tm_zone) __msan_unpoison_string(res->tm_zone);\n#endif\n  return res;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "const char *ldb_dn_get_rdn_name(struct ldb_dn *dn)\n{\n\tif ( ! ldb_dn_validate(dn)) {\n\t\treturn NULL;\n\t}\n\tif (dn->comp_num == 0) return NULL;\n\treturn dn->components[0].name;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static bool hns_nic_rx_fini_pro(struct hns_nic_ring_data *ring_data)\n{\n\tstruct hnae_ring *ring = ring_data->ring;\n\tint num = 0;\n\n\tring_data->ring->q->handle->dev->ops->toggle_ring_irq(ring, 0);\n\n\t/* for hardware bug fixed */\n\tnum = readl_relaxed(ring->io_base + RCB_REG_FBDNUM);\n\n\tif (num > 0) {\n\t\tring_data->ring->q->handle->dev->ops->toggle_ring_irq(\n\t\t\tring_data->ring, 1);\n\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void RenderWidgetHostImpl::RendererIsResponsive() {\n  if (is_unresponsive_) {\n    is_unresponsive_ = false;\n    NotifyRendererResponsive();\n  }\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "session_new(void)\n{\n\tSession *s, *tmp;\n\n\tif (sessions_first_unused == -1) {\n\t\tif (sessions_nalloc >= options.max_sessions)\n\t\t\treturn NULL;\n\t\tdebug2(\"%s: allocate (allocated %d max %d)\",\n\t\t    __func__, sessions_nalloc, options.max_sessions);\n\t\ttmp = xreallocarray(sessions, sessions_nalloc + 1,\n\t\t    sizeof(*sessions));\n\t\tif (tmp == NULL) {\n\t\t\terror(\"%s: cannot allocate %d sessions\",\n\t\t\t    __func__, sessions_nalloc + 1);\n\t\t\treturn NULL;\n\t\t}\n\t\tsessions = tmp;\n\t\tsession_unused(sessions_nalloc++);\n\t}\n\n\tif (sessions_first_unused >= sessions_nalloc ||\n\t    sessions_first_unused < 0) {\n\t\tfatal(\"%s: insane first_unused %d max %d nalloc %d\",\n\t\t    __func__, sessions_first_unused, options.max_sessions,\n\t\t    sessions_nalloc);\n\t}\n\n\ts = &sessions[sessions_first_unused];\n\tif (s->used) {\n\t\tfatal(\"%s: session %d already used\",\n\t\t    __func__, sessions_first_unused);\n\t}\n\tsessions_first_unused = s->next_unused;\n\ts->used = 1;\n\ts->next_unused = -1;\n\tdebug(\"session_new: session %d\", s->self);\n\n\treturn s;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "void XMLHttpRequest::open(const String& method, const KURL& url, ExceptionState& es)\n{\n    open(method, url, true, es);\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "_zip_cdir_write(struct zip_cdir *cd, FILE *fp, struct zip_error *error)\n{\n    int i;\n\n    cd->offset = ftello(fp);\n\n    for (i=0; i<cd->nentry; i++) {\n\tif (_zip_dirent_write(cd->entry+i, fp, 0, error) != 0)\n\t    return -1;\n    }\n\n    cd->size = ftello(fp) - cd->offset;\n    \n    /* clearerr(fp); */\n    fwrite(EOCD_MAGIC, 1, 4, fp);\n    _zip_write4(0, fp);\n    _zip_write2((unsigned short)cd->nentry, fp);\n    _zip_write2((unsigned short)cd->nentry, fp);\n    _zip_write4(cd->size, fp);\n    _zip_write4(cd->offset, fp);\n    _zip_write2(cd->comment_len, fp);\n    fwrite(cd->comment, 1, cd->comment_len, fp);\n\n    if (ferror(fp)) {\n\t_zip_error_set(error, ZIP_ER_WRITE, errno);\n\treturn -1;\n    }\n\n    return 0;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  },
  {
    "code": "static int ip6mr_rule_compare(struct fib_rule *rule, struct fib_rule_hdr *frh,\n\t\t\t      struct nlattr **tb)\n{\n\treturn 1;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable."
  },
  {
    "code": "ProcFillPoly(ClientPtr client)\n{\n    int things;\n    GC *pGC;\n    DrawablePtr pDraw;\n\n    REQUEST(xFillPolyReq);\n\n    REQUEST_AT_LEAST_SIZE(xFillPolyReq);\n    if ((stuff->shape != Complex) && (stuff->shape != Nonconvex) &&\n        (stuff->shape != Convex)) {\n        client->errorValue = stuff->shape;\n        return BadValue;\n    }\n    if ((stuff->coordMode != CoordModeOrigin) &&\n        (stuff->coordMode != CoordModePrevious)) {\n        client->errorValue = stuff->coordMode;\n        return BadValue;\n    }\n\n    VALIDATE_DRAWABLE_AND_GC(stuff->drawable, pDraw, DixWriteAccess);\n    things = bytes_to_int32((client->req_len << 2) - sizeof(xFillPolyReq));\n    if (things)\n        (*pGC->ops->FillPolygon) (pDraw, pGC, stuff->shape,\n                                  stuff->coordMode, things,\n                                  (DDXPointPtr) &stuff[1]);\n    return Success;\n}\n",
    "response": "\nNo, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No, this function is not vulnerable.No"
  }
]